syntax="proto3";

package vp;

service VolMgr {
    rpc CreateVol(CreateVolReq) returns (CreateVolAck){};
    rpc GetVolInfo(GetVolInfoReq) returns (GetVolInfoAck){};
    rpc DeleteVol(DeleteVolReq) returns (DeleteVolAck){};
    rpc GetVolList(GetVolListReq) returns (GetVolListAck){};
    //rpc ListVol(ListVolReq) returns (ListVolAck){};
    rpc DatanodeRegistry(DatanodeRegistryReq) returns (DatanodeRegistryAck){};
    rpc DatanodeHeartbeat(DatanodeHeartbeatReq) returns (DatanodeHeartbeatAck){};

    rpc UpdateChunkInfo(UpdateChunkInfoReq) returns (UpdateChunkInfoAck){};

}

message CreateVolReq {
    string VolName = 1 ;
    int32  SpaceQuota = 2 ;
    int32  InodeQuota = 3 ;
    string MetaDomain = 4 ;
}
message CreateVolAck {
    int32 Ret = 1;
    string UUID = 2;
    uint64 RaftGroupID = 3;
}

message GetVolInfoReq {
    string UUID = 1 ;
}
message GetVolInfoAck {
    int32 Ret = 1;
    VolInfo VolInfo = 2;
}

message DeleteVolReq {
    string UUID = 1 ;
}
message DeleteVolAck {
    int32 Ret = 1;
}


message GetVolListReq {
}

message VolIDs {
    string UUID = 1 ;
    uint64 RaftGroupID = 2 ;
}

message GetVolListAck {
    int32 Ret = 1;
    repeated VolIDs volIDs = 2;
}

message VolInfo {
    string VolID = 1;
    string VolName = 2;
    string MetaDomain = 3;
    int32  SpaceQuota = 4 ;
    int32  InodeQuota = 5 ;
    repeated BlockGroup BlockGroups = 6;
}
message BlockGroup{
    int32 BlockGroupID = 1;
    int32 FreeCnt = 2;
    int32 Status = 3;
    repeated BlockInfo BlockInfos = 4;
}


message BlockInfo{
    int32 BlockID = 1;
    int32 DataNodeIP = 2;
    int32 DataNodePort = 3;
    int32 Status = 4;
}

message DatanodeRegistryReq {
    int32 Ip = 1;
    int32 Port = 2;
    string MountPoint = 3 ;
    int32 Capacity = 4; //GB
}

message DatanodeRegistryAck {
    int32 Ret = 1;
    repeated int32 BlkIDs = 2;
}

message DatanodeHeartbeatReq {
    int32 Ip = 1;
    int32 Port = 2;
    int32 Free = 3;
    int32 Used = 4;
    int32 Status = 5;
}

message DatanodeHeartbeatAck {
}


message UpdateChunkInfoReq {
    string   Ip = 1;
    int32   Port = 2;
    string  VolID = 3;
    int32   BlockGroupID = 4;
    int32   BlockID = 5;
    int64   ChunkID = 6;
    int32   Position = 7;
    int32   Status = 8;
    string  Path = 9;
    
}
message UpdateChunkInfoAck {
    int32 Ret = 1;
}


service MdcService {
  rpc FetchMeters (MdcRequest) returns (Meters) {}
}
message Meters {
    repeated Meter meters = 1;
}

message Meter {
  string Name = 1;
  string Unit = 2;
  float  Volume = 3;
  string Resource = 4;
  string IP = 5;
  string Timestamp = 6;
  string Type = 7;
  string Details = 8;
}

message MdcRequest {
}


