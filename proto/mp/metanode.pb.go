// Code generated by protoc-gen-go.
// source: metanode.proto
// DO NOT EDIT!

/*
Package mp is a generated protocol buffer package.

It is generated from these files:
	metanode.proto

It has these top-level messages:
	NULL
	DataNode
	DataNodeRegistryAck
	UpdateBlkDBAck
	GetAllDataNodeReq
	GetAllDataNodeAck
	DelDataNodeReq
	DelDataNodeAck
	Volume
	Vols
	Block
	BGP
	CreateVolReq
	CreateVolAck
	ExpandVolTSReq
	ExpandVolTSAck
	ExpandVolRSReq
	ExpandVolRSAck
	DelVolRSForExpandReq
	DelVolRSForExpandAck
	DeleteVolReq
	DeleteVolAck
	GetVolInfoReq
	GetVolInfoAck
	MigrateReq
	MigrateAck
	GetMetaLeaderReq
	GetMetaLeaderAck
	CreateNameSpaceReq
	CreateNameSpaceAck
	ExpandNameSpaceReq
	ExpandNameSpaceAck
	SnapShootNameSpaceReq
	SnapShootNameSpaceAck
	DeleteNameSpaceReq
	DeleteNameSpaceAck
	GetFSInfoReq
	GetFSInfoAck
	CreateDirDirectReq
	CreateDirDirectAck
	CreateFileDirectReq
	CreateFileDirectAck
	DeleteDirDirectReq
	DeleteDirDirectAck
	RenameDirectReq
	RenameDirectAck
	DeleteFileDirectReq
	DeleteFileDirectAck
	GetInodeInfoDirectReq
	GetInodeInfoDirectAck
	StatDirectReq
	StatDirectAck
	ListDirectReq
	ListDirectAck
	GetFileChunksDirectReq
	GetFileChunksDirectAck
	AllocateChunkReq
	AllocateChunkAck
	SyncChunkReq
	SyncChunkAck
	AsyncChunkReq
	AsyncChunkAck
	BlkInfo
	InodeInfo
	Dirent
	DirentN
	BlockGroup
	ChunkInfo
	ChunkInfoWithBG
	ClusterInfoReq
	ClusterInfoAck
	MetaNodeInfoReq
	MetaNodeInfoAck
	DataNodeInfoReq
	DataNodeInfoAck
	VolumeInfosReq
	VolumeInfosAck
	NodeMonitorReq
	NodeMonitorAck
	NodeInfo
	DiskIO
	NetIO
*/
package mp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NULL struct {
}

func (m *NULL) Reset()                    { *m = NULL{} }
func (m *NULL) String() string            { return proto.CompactTextString(m) }
func (*NULL) ProtoMessage()               {}
func (*NULL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DataNode struct {
	Host       string `protobuf:"bytes,1,opt,name=Host" json:"Host,omitempty"`
	MountPoint string `protobuf:"bytes,2,opt,name=MountPoint" json:"MountPoint,omitempty"`
	Tier       string `protobuf:"bytes,3,opt,name=Tier" json:"Tier,omitempty"`
	Capacity   int32  `protobuf:"varint,4,opt,name=Capacity" json:"Capacity,omitempty"`
	Used       int32  `protobuf:"varint,5,opt,name=Used" json:"Used,omitempty"`
	Free       int32  `protobuf:"varint,6,opt,name=Free" json:"Free,omitempty"`
	Status     int32  `protobuf:"varint,7,opt,name=Status" json:"Status,omitempty"`
}

func (m *DataNode) Reset()                    { *m = DataNode{} }
func (m *DataNode) String() string            { return proto.CompactTextString(m) }
func (*DataNode) ProtoMessage()               {}
func (*DataNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DataNode) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *DataNode) GetMountPoint() string {
	if m != nil {
		return m.MountPoint
	}
	return ""
}

func (m *DataNode) GetTier() string {
	if m != nil {
		return m.Tier
	}
	return ""
}

func (m *DataNode) GetCapacity() int32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *DataNode) GetUsed() int32 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *DataNode) GetFree() int32 {
	if m != nil {
		return m.Free
	}
	return 0
}

func (m *DataNode) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type DataNodeRegistryAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *DataNodeRegistryAck) Reset()                    { *m = DataNodeRegistryAck{} }
func (m *DataNodeRegistryAck) String() string            { return proto.CompactTextString(m) }
func (*DataNodeRegistryAck) ProtoMessage()               {}
func (*DataNodeRegistryAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DataNodeRegistryAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type UpdateBlkDBAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *UpdateBlkDBAck) Reset()                    { *m = UpdateBlkDBAck{} }
func (m *UpdateBlkDBAck) String() string            { return proto.CompactTextString(m) }
func (*UpdateBlkDBAck) ProtoMessage()               {}
func (*UpdateBlkDBAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpdateBlkDBAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type GetAllDataNodeReq struct {
}

func (m *GetAllDataNodeReq) Reset()                    { *m = GetAllDataNodeReq{} }
func (m *GetAllDataNodeReq) String() string            { return proto.CompactTextString(m) }
func (*GetAllDataNodeReq) ProtoMessage()               {}
func (*GetAllDataNodeReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type GetAllDataNodeAck struct {
	Ret       int32       `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	DataNodes []*DataNode `protobuf:"bytes,2,rep,name=DataNodes" json:"DataNodes,omitempty"`
}

func (m *GetAllDataNodeAck) Reset()                    { *m = GetAllDataNodeAck{} }
func (m *GetAllDataNodeAck) String() string            { return proto.CompactTextString(m) }
func (*GetAllDataNodeAck) ProtoMessage()               {}
func (*GetAllDataNodeAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetAllDataNodeAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *GetAllDataNodeAck) GetDataNodes() []*DataNode {
	if m != nil {
		return m.DataNodes
	}
	return nil
}

type DelDataNodeReq struct {
	Host string `protobuf:"bytes,1,opt,name=Host" json:"Host,omitempty"`
}

func (m *DelDataNodeReq) Reset()                    { *m = DelDataNodeReq{} }
func (m *DelDataNodeReq) String() string            { return proto.CompactTextString(m) }
func (*DelDataNodeReq) ProtoMessage()               {}
func (*DelDataNodeReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DelDataNodeReq) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type DelDataNodeAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *DelDataNodeAck) Reset()                    { *m = DelDataNodeAck{} }
func (m *DelDataNodeAck) String() string            { return proto.CompactTextString(m) }
func (*DelDataNodeAck) ProtoMessage()               {}
func (*DelDataNodeAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DelDataNodeAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type Volume struct {
	UUID          string `protobuf:"bytes,1,opt,name=UUID" json:"UUID,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Tier          string `protobuf:"bytes,3,opt,name=Tier" json:"Tier,omitempty"`
	TotalSize     int32  `protobuf:"varint,4,opt,name=TotalSize" json:"TotalSize,omitempty"`
	AllocatedSize int32  `protobuf:"varint,5,opt,name=AllocatedSize" json:"AllocatedSize,omitempty"`
	RGID          uint64 `protobuf:"varint,6,opt,name=RGID" json:"RGID,omitempty"`
}

func (m *Volume) Reset()                    { *m = Volume{} }
func (m *Volume) String() string            { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()               {}
func (*Volume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Volume) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Volume) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Volume) GetTier() string {
	if m != nil {
		return m.Tier
	}
	return ""
}

func (m *Volume) GetTotalSize() int32 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

func (m *Volume) GetAllocatedSize() int32 {
	if m != nil {
		return m.AllocatedSize
	}
	return 0
}

func (m *Volume) GetRGID() uint64 {
	if m != nil {
		return m.RGID
	}
	return 0
}

type Vols struct {
	Volumes []*Volume `protobuf:"bytes,1,rep,name=Volumes" json:"Volumes,omitempty"`
}

func (m *Vols) Reset()                    { *m = Vols{} }
func (m *Vols) String() string            { return proto.CompactTextString(m) }
func (*Vols) ProtoMessage()               {}
func (*Vols) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Vols) GetVolumes() []*Volume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

type Block struct {
	BlkID  uint64 `protobuf:"varint,1,opt,name=BlkID" json:"BlkID,omitempty"`
	Host   string `protobuf:"bytes,2,opt,name=Host" json:"Host,omitempty"`
	Path   string `protobuf:"bytes,3,opt,name=Path" json:"Path,omitempty"`
	Status int32  `protobuf:"varint,4,opt,name=Status" json:"Status,omitempty"`
	BGID   uint64 `protobuf:"varint,5,opt,name=BGID" json:"BGID,omitempty"`
	VolID  string `protobuf:"bytes,6,opt,name=VolID" json:"VolID,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Block) GetBlkID() uint64 {
	if m != nil {
		return m.BlkID
	}
	return 0
}

func (m *Block) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Block) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Block) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Block) GetBGID() uint64 {
	if m != nil {
		return m.BGID
	}
	return 0
}

func (m *Block) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

type BGP struct {
	Blocks []*Block `protobuf:"bytes,1,rep,name=Blocks" json:"Blocks,omitempty"`
}

func (m *BGP) Reset()                    { *m = BGP{} }
func (m *BGP) String() string            { return proto.CompactTextString(m) }
func (*BGP) ProtoMessage()               {}
func (*BGP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *BGP) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type CreateVolReq struct {
	VolName    string `protobuf:"bytes,1,opt,name=VolName" json:"VolName,omitempty"`
	SpaceQuota int32  `protobuf:"varint,2,opt,name=SpaceQuota" json:"SpaceQuota,omitempty"`
	Tier       string `protobuf:"bytes,3,opt,name=Tier" json:"Tier,omitempty"`
}

func (m *CreateVolReq) Reset()                    { *m = CreateVolReq{} }
func (m *CreateVolReq) String() string            { return proto.CompactTextString(m) }
func (*CreateVolReq) ProtoMessage()               {}
func (*CreateVolReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CreateVolReq) GetVolName() string {
	if m != nil {
		return m.VolName
	}
	return ""
}

func (m *CreateVolReq) GetSpaceQuota() int32 {
	if m != nil {
		return m.SpaceQuota
	}
	return 0
}

func (m *CreateVolReq) GetTier() string {
	if m != nil {
		return m.Tier
	}
	return ""
}

type CreateVolAck struct {
	Ret         int32  `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	UUID        string `protobuf:"bytes,2,opt,name=UUID" json:"UUID,omitempty"`
	RaftGroupID uint64 `protobuf:"varint,3,opt,name=RaftGroupID" json:"RaftGroupID,omitempty"`
}

func (m *CreateVolAck) Reset()                    { *m = CreateVolAck{} }
func (m *CreateVolAck) String() string            { return proto.CompactTextString(m) }
func (*CreateVolAck) ProtoMessage()               {}
func (*CreateVolAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CreateVolAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *CreateVolAck) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *CreateVolAck) GetRaftGroupID() uint64 {
	if m != nil {
		return m.RaftGroupID
	}
	return 0
}

type ExpandVolTSReq struct {
	VolID       string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	ExpandQuota int32  `protobuf:"varint,2,opt,name=ExpandQuota" json:"ExpandQuota,omitempty"`
}

func (m *ExpandVolTSReq) Reset()                    { *m = ExpandVolTSReq{} }
func (m *ExpandVolTSReq) String() string            { return proto.CompactTextString(m) }
func (*ExpandVolTSReq) ProtoMessage()               {}
func (*ExpandVolTSReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ExpandVolTSReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *ExpandVolTSReq) GetExpandQuota() int32 {
	if m != nil {
		return m.ExpandQuota
	}
	return 0
}

type ExpandVolTSAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *ExpandVolTSAck) Reset()                    { *m = ExpandVolTSAck{} }
func (m *ExpandVolTSAck) String() string            { return proto.CompactTextString(m) }
func (*ExpandVolTSAck) ProtoMessage()               {}
func (*ExpandVolTSAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ExpandVolTSAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type ExpandVolRSReq struct {
	VolID string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
}

func (m *ExpandVolRSReq) Reset()                    { *m = ExpandVolRSReq{} }
func (m *ExpandVolRSReq) String() string            { return proto.CompactTextString(m) }
func (*ExpandVolRSReq) ProtoMessage()               {}
func (*ExpandVolRSReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ExpandVolRSReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

type ExpandVolRSAck struct {
	Ret  int32  `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	BGPS []*BGP `protobuf:"bytes,2,rep,name=BGPS" json:"BGPS,omitempty"`
}

func (m *ExpandVolRSAck) Reset()                    { *m = ExpandVolRSAck{} }
func (m *ExpandVolRSAck) String() string            { return proto.CompactTextString(m) }
func (*ExpandVolRSAck) ProtoMessage()               {}
func (*ExpandVolRSAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ExpandVolRSAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *ExpandVolRSAck) GetBGPS() []*BGP {
	if m != nil {
		return m.BGPS
	}
	return nil
}

type DelVolRSForExpandReq struct {
	UUID string `protobuf:"bytes,1,opt,name=UUID" json:"UUID,omitempty"`
	BGPS []*BGP `protobuf:"bytes,2,rep,name=BGPS" json:"BGPS,omitempty"`
}

func (m *DelVolRSForExpandReq) Reset()                    { *m = DelVolRSForExpandReq{} }
func (m *DelVolRSForExpandReq) String() string            { return proto.CompactTextString(m) }
func (*DelVolRSForExpandReq) ProtoMessage()               {}
func (*DelVolRSForExpandReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *DelVolRSForExpandReq) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DelVolRSForExpandReq) GetBGPS() []*BGP {
	if m != nil {
		return m.BGPS
	}
	return nil
}

type DelVolRSForExpandAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *DelVolRSForExpandAck) Reset()                    { *m = DelVolRSForExpandAck{} }
func (m *DelVolRSForExpandAck) String() string            { return proto.CompactTextString(m) }
func (*DelVolRSForExpandAck) ProtoMessage()               {}
func (*DelVolRSForExpandAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *DelVolRSForExpandAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type DeleteVolReq struct {
	UUID string `protobuf:"bytes,1,opt,name=UUID" json:"UUID,omitempty"`
}

func (m *DeleteVolReq) Reset()                    { *m = DeleteVolReq{} }
func (m *DeleteVolReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteVolReq) ProtoMessage()               {}
func (*DeleteVolReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *DeleteVolReq) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type DeleteVolAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *DeleteVolAck) Reset()                    { *m = DeleteVolAck{} }
func (m *DeleteVolAck) String() string            { return proto.CompactTextString(m) }
func (*DeleteVolAck) ProtoMessage()               {}
func (*DeleteVolAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *DeleteVolAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type GetVolInfoReq struct {
	UUID string `protobuf:"bytes,1,opt,name=UUID" json:"UUID,omitempty"`
}

func (m *GetVolInfoReq) Reset()                    { *m = GetVolInfoReq{} }
func (m *GetVolInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetVolInfoReq) ProtoMessage()               {}
func (*GetVolInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GetVolInfoReq) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type GetVolInfoAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	// Volume VolInfo=2;
	BGPS []*BGP `protobuf:"bytes,2,rep,name=BGPS" json:"BGPS,omitempty"`
}

func (m *GetVolInfoAck) Reset()                    { *m = GetVolInfoAck{} }
func (m *GetVolInfoAck) String() string            { return proto.CompactTextString(m) }
func (*GetVolInfoAck) ProtoMessage()               {}
func (*GetVolInfoAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *GetVolInfoAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *GetVolInfoAck) GetBGPS() []*BGP {
	if m != nil {
		return m.BGPS
	}
	return nil
}

type MigrateReq struct {
	DataNodeHost string `protobuf:"bytes,1,opt,name=DataNodeHost" json:"DataNodeHost,omitempty"`
}

func (m *MigrateReq) Reset()                    { *m = MigrateReq{} }
func (m *MigrateReq) String() string            { return proto.CompactTextString(m) }
func (*MigrateReq) ProtoMessage()               {}
func (*MigrateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *MigrateReq) GetDataNodeHost() string {
	if m != nil {
		return m.DataNodeHost
	}
	return ""
}

type MigrateAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *MigrateAck) Reset()                    { *m = MigrateAck{} }
func (m *MigrateAck) String() string            { return proto.CompactTextString(m) }
func (*MigrateAck) ProtoMessage()               {}
func (*MigrateAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *MigrateAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type GetMetaLeaderReq struct {
	VolID string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
}

func (m *GetMetaLeaderReq) Reset()                    { *m = GetMetaLeaderReq{} }
func (m *GetMetaLeaderReq) String() string            { return proto.CompactTextString(m) }
func (*GetMetaLeaderReq) ProtoMessage()               {}
func (*GetMetaLeaderReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *GetMetaLeaderReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

type GetMetaLeaderAck struct {
	Ret    int32  `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	Leader string `protobuf:"bytes,2,opt,name=Leader" json:"Leader,omitempty"`
}

func (m *GetMetaLeaderAck) Reset()                    { *m = GetMetaLeaderAck{} }
func (m *GetMetaLeaderAck) String() string            { return proto.CompactTextString(m) }
func (*GetMetaLeaderAck) ProtoMessage()               {}
func (*GetMetaLeaderAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *GetMetaLeaderAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *GetMetaLeaderAck) GetLeader() string {
	if m != nil {
		return m.Leader
	}
	return ""
}

type CreateNameSpaceReq struct {
	VolID       string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	Type        int32  `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
	RaftGroupID uint64 `protobuf:"varint,3,opt,name=RaftGroupID" json:"RaftGroupID,omitempty"`
}

func (m *CreateNameSpaceReq) Reset()                    { *m = CreateNameSpaceReq{} }
func (m *CreateNameSpaceReq) String() string            { return proto.CompactTextString(m) }
func (*CreateNameSpaceReq) ProtoMessage()               {}
func (*CreateNameSpaceReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *CreateNameSpaceReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *CreateNameSpaceReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CreateNameSpaceReq) GetRaftGroupID() uint64 {
	if m != nil {
		return m.RaftGroupID
	}
	return 0
}

type CreateNameSpaceAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *CreateNameSpaceAck) Reset()                    { *m = CreateNameSpaceAck{} }
func (m *CreateNameSpaceAck) String() string            { return proto.CompactTextString(m) }
func (*CreateNameSpaceAck) ProtoMessage()               {}
func (*CreateNameSpaceAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *CreateNameSpaceAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type ExpandNameSpaceReq struct {
	VolID       string        `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	BlockGroups []*BlockGroup `protobuf:"bytes,2,rep,name=BlockGroups" json:"BlockGroups,omitempty"`
}

func (m *ExpandNameSpaceReq) Reset()                    { *m = ExpandNameSpaceReq{} }
func (m *ExpandNameSpaceReq) String() string            { return proto.CompactTextString(m) }
func (*ExpandNameSpaceReq) ProtoMessage()               {}
func (*ExpandNameSpaceReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ExpandNameSpaceReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *ExpandNameSpaceReq) GetBlockGroups() []*BlockGroup {
	if m != nil {
		return m.BlockGroups
	}
	return nil
}

type ExpandNameSpaceAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *ExpandNameSpaceAck) Reset()                    { *m = ExpandNameSpaceAck{} }
func (m *ExpandNameSpaceAck) String() string            { return proto.CompactTextString(m) }
func (*ExpandNameSpaceAck) ProtoMessage()               {}
func (*ExpandNameSpaceAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *ExpandNameSpaceAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type SnapShootNameSpaceReq struct {
	VolID string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	Type  int32  `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
}

func (m *SnapShootNameSpaceReq) Reset()                    { *m = SnapShootNameSpaceReq{} }
func (m *SnapShootNameSpaceReq) String() string            { return proto.CompactTextString(m) }
func (*SnapShootNameSpaceReq) ProtoMessage()               {}
func (*SnapShootNameSpaceReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *SnapShootNameSpaceReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *SnapShootNameSpaceReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type SnapShootNameSpaceAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *SnapShootNameSpaceAck) Reset()                    { *m = SnapShootNameSpaceAck{} }
func (m *SnapShootNameSpaceAck) String() string            { return proto.CompactTextString(m) }
func (*SnapShootNameSpaceAck) ProtoMessage()               {}
func (*SnapShootNameSpaceAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *SnapShootNameSpaceAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type DeleteNameSpaceReq struct {
	VolID string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	Type  int32  `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
}

func (m *DeleteNameSpaceReq) Reset()                    { *m = DeleteNameSpaceReq{} }
func (m *DeleteNameSpaceReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteNameSpaceReq) ProtoMessage()               {}
func (*DeleteNameSpaceReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *DeleteNameSpaceReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *DeleteNameSpaceReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type DeleteNameSpaceAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *DeleteNameSpaceAck) Reset()                    { *m = DeleteNameSpaceAck{} }
func (m *DeleteNameSpaceAck) String() string            { return proto.CompactTextString(m) }
func (*DeleteNameSpaceAck) ProtoMessage()               {}
func (*DeleteNameSpaceAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *DeleteNameSpaceAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type GetFSInfoReq struct {
	VolID string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
}

func (m *GetFSInfoReq) Reset()                    { *m = GetFSInfoReq{} }
func (m *GetFSInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetFSInfoReq) ProtoMessage()               {}
func (*GetFSInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *GetFSInfoReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

type GetFSInfoAck struct {
	Ret        int32  `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	TotalSpace uint64 `protobuf:"varint,2,opt,name=TotalSpace" json:"TotalSpace,omitempty"`
	FreeSpace  uint64 `protobuf:"varint,3,opt,name=FreeSpace" json:"FreeSpace,omitempty"`
}

func (m *GetFSInfoAck) Reset()                    { *m = GetFSInfoAck{} }
func (m *GetFSInfoAck) String() string            { return proto.CompactTextString(m) }
func (*GetFSInfoAck) ProtoMessage()               {}
func (*GetFSInfoAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *GetFSInfoAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *GetFSInfoAck) GetTotalSpace() uint64 {
	if m != nil {
		return m.TotalSpace
	}
	return 0
}

func (m *GetFSInfoAck) GetFreeSpace() uint64 {
	if m != nil {
		return m.FreeSpace
	}
	return 0
}

type CreateDirDirectReq struct {
	VolID  string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	PInode uint64 `protobuf:"varint,2,opt,name=PInode" json:"PInode,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *CreateDirDirectReq) Reset()                    { *m = CreateDirDirectReq{} }
func (m *CreateDirDirectReq) String() string            { return proto.CompactTextString(m) }
func (*CreateDirDirectReq) ProtoMessage()               {}
func (*CreateDirDirectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *CreateDirDirectReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *CreateDirDirectReq) GetPInode() uint64 {
	if m != nil {
		return m.PInode
	}
	return 0
}

func (m *CreateDirDirectReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateDirDirectAck struct {
	Ret   int32  `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	Inode uint64 `protobuf:"varint,2,opt,name=Inode" json:"Inode,omitempty"`
}

func (m *CreateDirDirectAck) Reset()                    { *m = CreateDirDirectAck{} }
func (m *CreateDirDirectAck) String() string            { return proto.CompactTextString(m) }
func (*CreateDirDirectAck) ProtoMessage()               {}
func (*CreateDirDirectAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *CreateDirDirectAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *CreateDirDirectAck) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

type CreateFileDirectReq struct {
	VolID  string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	PInode uint64 `protobuf:"varint,2,opt,name=PInode" json:"PInode,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *CreateFileDirectReq) Reset()                    { *m = CreateFileDirectReq{} }
func (m *CreateFileDirectReq) String() string            { return proto.CompactTextString(m) }
func (*CreateFileDirectReq) ProtoMessage()               {}
func (*CreateFileDirectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *CreateFileDirectReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *CreateFileDirectReq) GetPInode() uint64 {
	if m != nil {
		return m.PInode
	}
	return 0
}

func (m *CreateFileDirectReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateFileDirectAck struct {
	Ret   int32  `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	Inode uint64 `protobuf:"varint,2,opt,name=Inode" json:"Inode,omitempty"`
}

func (m *CreateFileDirectAck) Reset()                    { *m = CreateFileDirectAck{} }
func (m *CreateFileDirectAck) String() string            { return proto.CompactTextString(m) }
func (*CreateFileDirectAck) ProtoMessage()               {}
func (*CreateFileDirectAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *CreateFileDirectAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *CreateFileDirectAck) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

type DeleteDirDirectReq struct {
	VolID  string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	PInode uint64 `protobuf:"varint,2,opt,name=PInode" json:"PInode,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *DeleteDirDirectReq) Reset()                    { *m = DeleteDirDirectReq{} }
func (m *DeleteDirDirectReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteDirDirectReq) ProtoMessage()               {}
func (*DeleteDirDirectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *DeleteDirDirectReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *DeleteDirDirectReq) GetPInode() uint64 {
	if m != nil {
		return m.PInode
	}
	return 0
}

func (m *DeleteDirDirectReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteDirDirectAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *DeleteDirDirectAck) Reset()                    { *m = DeleteDirDirectAck{} }
func (m *DeleteDirDirectAck) String() string            { return proto.CompactTextString(m) }
func (*DeleteDirDirectAck) ProtoMessage()               {}
func (*DeleteDirDirectAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *DeleteDirDirectAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type RenameDirectReq struct {
	VolID     string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	OldPInode uint64 `protobuf:"varint,2,opt,name=OldPInode" json:"OldPInode,omitempty"`
	OldName   string `protobuf:"bytes,3,opt,name=OldName" json:"OldName,omitempty"`
	NewPInode uint64 `protobuf:"varint,4,opt,name=NewPInode" json:"NewPInode,omitempty"`
	NewName   string `protobuf:"bytes,5,opt,name=NewName" json:"NewName,omitempty"`
}

func (m *RenameDirectReq) Reset()                    { *m = RenameDirectReq{} }
func (m *RenameDirectReq) String() string            { return proto.CompactTextString(m) }
func (*RenameDirectReq) ProtoMessage()               {}
func (*RenameDirectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *RenameDirectReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *RenameDirectReq) GetOldPInode() uint64 {
	if m != nil {
		return m.OldPInode
	}
	return 0
}

func (m *RenameDirectReq) GetOldName() string {
	if m != nil {
		return m.OldName
	}
	return ""
}

func (m *RenameDirectReq) GetNewPInode() uint64 {
	if m != nil {
		return m.NewPInode
	}
	return 0
}

func (m *RenameDirectReq) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

type RenameDirectAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *RenameDirectAck) Reset()                    { *m = RenameDirectAck{} }
func (m *RenameDirectAck) String() string            { return proto.CompactTextString(m) }
func (*RenameDirectAck) ProtoMessage()               {}
func (*RenameDirectAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *RenameDirectAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type DeleteFileDirectReq struct {
	VolID  string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	PInode uint64 `protobuf:"varint,2,opt,name=PInode" json:"PInode,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *DeleteFileDirectReq) Reset()                    { *m = DeleteFileDirectReq{} }
func (m *DeleteFileDirectReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteFileDirectReq) ProtoMessage()               {}
func (*DeleteFileDirectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *DeleteFileDirectReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *DeleteFileDirectReq) GetPInode() uint64 {
	if m != nil {
		return m.PInode
	}
	return 0
}

func (m *DeleteFileDirectReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteFileDirectAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *DeleteFileDirectAck) Reset()                    { *m = DeleteFileDirectAck{} }
func (m *DeleteFileDirectAck) String() string            { return proto.CompactTextString(m) }
func (*DeleteFileDirectAck) ProtoMessage()               {}
func (*DeleteFileDirectAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *DeleteFileDirectAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type GetInodeInfoDirectReq struct {
	VolID  string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	PInode uint64 `protobuf:"varint,2,opt,name=PInode" json:"PInode,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *GetInodeInfoDirectReq) Reset()                    { *m = GetInodeInfoDirectReq{} }
func (m *GetInodeInfoDirectReq) String() string            { return proto.CompactTextString(m) }
func (*GetInodeInfoDirectReq) ProtoMessage()               {}
func (*GetInodeInfoDirectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *GetInodeInfoDirectReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *GetInodeInfoDirectReq) GetPInode() uint64 {
	if m != nil {
		return m.PInode
	}
	return 0
}

func (m *GetInodeInfoDirectReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetInodeInfoDirectAck struct {
	Ret       int32      `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	InodeInfo *InodeInfo `protobuf:"bytes,2,opt,name=InodeInfo" json:"InodeInfo,omitempty"`
	Inode     uint64     `protobuf:"varint,3,opt,name=Inode" json:"Inode,omitempty"`
}

func (m *GetInodeInfoDirectAck) Reset()                    { *m = GetInodeInfoDirectAck{} }
func (m *GetInodeInfoDirectAck) String() string            { return proto.CompactTextString(m) }
func (*GetInodeInfoDirectAck) ProtoMessage()               {}
func (*GetInodeInfoDirectAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *GetInodeInfoDirectAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *GetInodeInfoDirectAck) GetInodeInfo() *InodeInfo {
	if m != nil {
		return m.InodeInfo
	}
	return nil
}

func (m *GetInodeInfoDirectAck) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

type StatDirectReq struct {
	VolID  string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	PInode uint64 `protobuf:"varint,2,opt,name=PInode" json:"PInode,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *StatDirectReq) Reset()                    { *m = StatDirectReq{} }
func (m *StatDirectReq) String() string            { return proto.CompactTextString(m) }
func (*StatDirectReq) ProtoMessage()               {}
func (*StatDirectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *StatDirectReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *StatDirectReq) GetPInode() uint64 {
	if m != nil {
		return m.PInode
	}
	return 0
}

func (m *StatDirectReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type StatDirectAck struct {
	Ret       int32  `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	InodeType bool   `protobuf:"varint,2,opt,name=InodeType" json:"InodeType,omitempty"`
	Inode     uint64 `protobuf:"varint,3,opt,name=Inode" json:"Inode,omitempty"`
}

func (m *StatDirectAck) Reset()                    { *m = StatDirectAck{} }
func (m *StatDirectAck) String() string            { return proto.CompactTextString(m) }
func (*StatDirectAck) ProtoMessage()               {}
func (*StatDirectAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *StatDirectAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *StatDirectAck) GetInodeType() bool {
	if m != nil {
		return m.InodeType
	}
	return false
}

func (m *StatDirectAck) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

type ListDirectReq struct {
	VolID  string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	PInode uint64 `protobuf:"varint,2,opt,name=PInode" json:"PInode,omitempty"`
}

func (m *ListDirectReq) Reset()                    { *m = ListDirectReq{} }
func (m *ListDirectReq) String() string            { return proto.CompactTextString(m) }
func (*ListDirectReq) ProtoMessage()               {}
func (*ListDirectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *ListDirectReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *ListDirectReq) GetPInode() uint64 {
	if m != nil {
		return m.PInode
	}
	return 0
}

type ListDirectAck struct {
	Ret     int32      `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	Dirents []*DirentN `protobuf:"bytes,2,rep,name=Dirents" json:"Dirents,omitempty"`
}

func (m *ListDirectAck) Reset()                    { *m = ListDirectAck{} }
func (m *ListDirectAck) String() string            { return proto.CompactTextString(m) }
func (*ListDirectAck) ProtoMessage()               {}
func (*ListDirectAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *ListDirectAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *ListDirectAck) GetDirents() []*DirentN {
	if m != nil {
		return m.Dirents
	}
	return nil
}

type GetFileChunksDirectReq struct {
	VolID  string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	PInode uint64 `protobuf:"varint,2,opt,name=PInode" json:"PInode,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *GetFileChunksDirectReq) Reset()                    { *m = GetFileChunksDirectReq{} }
func (m *GetFileChunksDirectReq) String() string            { return proto.CompactTextString(m) }
func (*GetFileChunksDirectReq) ProtoMessage()               {}
func (*GetFileChunksDirectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *GetFileChunksDirectReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *GetFileChunksDirectReq) GetPInode() uint64 {
	if m != nil {
		return m.PInode
	}
	return 0
}

func (m *GetFileChunksDirectReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetFileChunksDirectAck struct {
	Ret        int32              `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	ChunkInfos []*ChunkInfoWithBG `protobuf:"bytes,2,rep,name=ChunkInfos" json:"ChunkInfos,omitempty"`
	Inode      uint64             `protobuf:"varint,3,opt,name=Inode" json:"Inode,omitempty"`
}

func (m *GetFileChunksDirectAck) Reset()                    { *m = GetFileChunksDirectAck{} }
func (m *GetFileChunksDirectAck) String() string            { return proto.CompactTextString(m) }
func (*GetFileChunksDirectAck) ProtoMessage()               {}
func (*GetFileChunksDirectAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *GetFileChunksDirectAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *GetFileChunksDirectAck) GetChunkInfos() []*ChunkInfoWithBG {
	if m != nil {
		return m.ChunkInfos
	}
	return nil
}

func (m *GetFileChunksDirectAck) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

type AllocateChunkReq struct {
	VolID string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
}

func (m *AllocateChunkReq) Reset()                    { *m = AllocateChunkReq{} }
func (m *AllocateChunkReq) String() string            { return proto.CompactTextString(m) }
func (*AllocateChunkReq) ProtoMessage()               {}
func (*AllocateChunkReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *AllocateChunkReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

type AllocateChunkAck struct {
	Ret       int32            `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	ChunkInfo *ChunkInfoWithBG `protobuf:"bytes,2,opt,name=ChunkInfo" json:"ChunkInfo,omitempty"`
}

func (m *AllocateChunkAck) Reset()                    { *m = AllocateChunkAck{} }
func (m *AllocateChunkAck) String() string            { return proto.CompactTextString(m) }
func (*AllocateChunkAck) ProtoMessage()               {}
func (*AllocateChunkAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *AllocateChunkAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *AllocateChunkAck) GetChunkInfo() *ChunkInfoWithBG {
	if m != nil {
		return m.ChunkInfo
	}
	return nil
}

type SyncChunkReq struct {
	VolID         string     `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	ParentInodeID uint64     `protobuf:"varint,2,opt,name=ParentInodeID" json:"ParentInodeID,omitempty"`
	Name          string     `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	ChunkInfo     *ChunkInfo `protobuf:"bytes,4,opt,name=ChunkInfo" json:"ChunkInfo,omitempty"`
	Size          int64      `protobuf:"varint,5,opt,name=Size" json:"Size,omitempty"`
}

func (m *SyncChunkReq) Reset()                    { *m = SyncChunkReq{} }
func (m *SyncChunkReq) String() string            { return proto.CompactTextString(m) }
func (*SyncChunkReq) ProtoMessage()               {}
func (*SyncChunkReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *SyncChunkReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *SyncChunkReq) GetParentInodeID() uint64 {
	if m != nil {
		return m.ParentInodeID
	}
	return 0
}

func (m *SyncChunkReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SyncChunkReq) GetChunkInfo() *ChunkInfo {
	if m != nil {
		return m.ChunkInfo
	}
	return nil
}

func (m *SyncChunkReq) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type SyncChunkAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *SyncChunkAck) Reset()                    { *m = SyncChunkAck{} }
func (m *SyncChunkAck) String() string            { return proto.CompactTextString(m) }
func (*SyncChunkAck) ProtoMessage()               {}
func (*SyncChunkAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *SyncChunkAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type AsyncChunkReq struct {
	VolID         string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	ParentInodeID uint64 `protobuf:"varint,2,opt,name=ParentInodeID" json:"ParentInodeID,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	BlockGroupID  uint64 `protobuf:"varint,4,opt,name=BlockGroupID" json:"BlockGroupID,omitempty"`
	ChunkID       uint64 `protobuf:"varint,5,opt,name=ChunkID" json:"ChunkID,omitempty"`
	CommitSize    uint32 `protobuf:"varint,6,opt,name=CommitSize" json:"CommitSize,omitempty"`
}

func (m *AsyncChunkReq) Reset()                    { *m = AsyncChunkReq{} }
func (m *AsyncChunkReq) String() string            { return proto.CompactTextString(m) }
func (*AsyncChunkReq) ProtoMessage()               {}
func (*AsyncChunkReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *AsyncChunkReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *AsyncChunkReq) GetParentInodeID() uint64 {
	if m != nil {
		return m.ParentInodeID
	}
	return 0
}

func (m *AsyncChunkReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AsyncChunkReq) GetBlockGroupID() uint64 {
	if m != nil {
		return m.BlockGroupID
	}
	return 0
}

func (m *AsyncChunkReq) GetChunkID() uint64 {
	if m != nil {
		return m.ChunkID
	}
	return 0
}

func (m *AsyncChunkReq) GetCommitSize() uint32 {
	if m != nil {
		return m.CommitSize
	}
	return 0
}

type AsyncChunkAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *AsyncChunkAck) Reset()                    { *m = AsyncChunkAck{} }
func (m *AsyncChunkAck) String() string            { return proto.CompactTextString(m) }
func (*AsyncChunkAck) ProtoMessage()               {}
func (*AsyncChunkAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *AsyncChunkAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type BlkInfo struct {
	BgpID   uint64 `protobuf:"varint,1,opt,name=BgpID" json:"BgpID,omitempty"`
	BlockID uint64 `protobuf:"varint,2,opt,name=BlockID" json:"BlockID,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=Status" json:"Status,omitempty"`
}

func (m *BlkInfo) Reset()                    { *m = BlkInfo{} }
func (m *BlkInfo) String() string            { return proto.CompactTextString(m) }
func (*BlkInfo) ProtoMessage()               {}
func (*BlkInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *BlkInfo) GetBgpID() uint64 {
	if m != nil {
		return m.BgpID
	}
	return 0
}

func (m *BlkInfo) GetBlockID() uint64 {
	if m != nil {
		return m.BlockID
	}
	return 0
}

func (m *BlkInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type InodeInfo struct {
	ModifiTime int64        `protobuf:"varint,1,opt,name=ModifiTime" json:"ModifiTime,omitempty"`
	AccessTime int64        `protobuf:"varint,2,opt,name=AccessTime" json:"AccessTime,omitempty"`
	Link       uint32       `protobuf:"varint,3,opt,name=Link" json:"Link,omitempty"`
	FileSize   int64        `protobuf:"varint,4,opt,name=FileSize" json:"FileSize,omitempty"`
	Chunks     []*ChunkInfo `protobuf:"bytes,5,rep,name=Chunks" json:"Chunks,omitempty"`
}

func (m *InodeInfo) Reset()                    { *m = InodeInfo{} }
func (m *InodeInfo) String() string            { return proto.CompactTextString(m) }
func (*InodeInfo) ProtoMessage()               {}
func (*InodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *InodeInfo) GetModifiTime() int64 {
	if m != nil {
		return m.ModifiTime
	}
	return 0
}

func (m *InodeInfo) GetAccessTime() int64 {
	if m != nil {
		return m.AccessTime
	}
	return 0
}

func (m *InodeInfo) GetLink() uint32 {
	if m != nil {
		return m.Link
	}
	return 0
}

func (m *InodeInfo) GetFileSize() int64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *InodeInfo) GetChunks() []*ChunkInfo {
	if m != nil {
		return m.Chunks
	}
	return nil
}

type Dirent struct {
	InodeType bool   `protobuf:"varint,1,opt,name=InodeType" json:"InodeType,omitempty"`
	Inode     uint64 `protobuf:"varint,2,opt,name=Inode" json:"Inode,omitempty"`
}

func (m *Dirent) Reset()                    { *m = Dirent{} }
func (m *Dirent) String() string            { return proto.CompactTextString(m) }
func (*Dirent) ProtoMessage()               {}
func (*Dirent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *Dirent) GetInodeType() bool {
	if m != nil {
		return m.InodeType
	}
	return false
}

func (m *Dirent) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

type DirentN struct {
	InodeType bool   `protobuf:"varint,1,opt,name=InodeType" json:"InodeType,omitempty"`
	Inode     uint64 `protobuf:"varint,2,opt,name=Inode" json:"Inode,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *DirentN) Reset()                    { *m = DirentN{} }
func (m *DirentN) String() string            { return proto.CompactTextString(m) }
func (*DirentN) ProtoMessage()               {}
func (*DirentN) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *DirentN) GetInodeType() bool {
	if m != nil {
		return m.InodeType
	}
	return false
}

func (m *DirentN) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

func (m *DirentN) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type BlockGroup struct {
	BlockGroupID uint64 `protobuf:"varint,1,opt,name=BlockGroupID" json:"BlockGroupID,omitempty"`
	FreeSize     int64  `protobuf:"varint,2,opt,name=FreeSize" json:"FreeSize,omitempty"`
	Status       int32  `protobuf:"varint,3,opt,name=Status" json:"Status,omitempty"`
}

func (m *BlockGroup) Reset()                    { *m = BlockGroup{} }
func (m *BlockGroup) String() string            { return proto.CompactTextString(m) }
func (*BlockGroup) ProtoMessage()               {}
func (*BlockGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *BlockGroup) GetBlockGroupID() uint64 {
	if m != nil {
		return m.BlockGroupID
	}
	return 0
}

func (m *BlockGroup) GetFreeSize() int64 {
	if m != nil {
		return m.FreeSize
	}
	return 0
}

func (m *BlockGroup) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type ChunkInfo struct {
	ChunkID      uint64 `protobuf:"varint,1,opt,name=ChunkID" json:"ChunkID,omitempty"`
	ChunkSize    int32  `protobuf:"varint,2,opt,name=ChunkSize" json:"ChunkSize,omitempty"`
	BlockGroupID uint64 `protobuf:"varint,3,opt,name=BlockGroupID" json:"BlockGroupID,omitempty"`
}

func (m *ChunkInfo) Reset()                    { *m = ChunkInfo{} }
func (m *ChunkInfo) String() string            { return proto.CompactTextString(m) }
func (*ChunkInfo) ProtoMessage()               {}
func (*ChunkInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *ChunkInfo) GetChunkID() uint64 {
	if m != nil {
		return m.ChunkID
	}
	return 0
}

func (m *ChunkInfo) GetChunkSize() int32 {
	if m != nil {
		return m.ChunkSize
	}
	return 0
}

func (m *ChunkInfo) GetBlockGroupID() uint64 {
	if m != nil {
		return m.BlockGroupID
	}
	return 0
}

type ChunkInfoWithBG struct {
	ChunkID   uint64 `protobuf:"varint,1,opt,name=ChunkID" json:"ChunkID,omitempty"`
	ChunkSize int32  `protobuf:"varint,2,opt,name=ChunkSize" json:"ChunkSize,omitempty"`
	BGP       *BGP   `protobuf:"bytes,3,opt,name=BGP" json:"BGP,omitempty"`
}

func (m *ChunkInfoWithBG) Reset()                    { *m = ChunkInfoWithBG{} }
func (m *ChunkInfoWithBG) String() string            { return proto.CompactTextString(m) }
func (*ChunkInfoWithBG) ProtoMessage()               {}
func (*ChunkInfoWithBG) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *ChunkInfoWithBG) GetChunkID() uint64 {
	if m != nil {
		return m.ChunkID
	}
	return 0
}

func (m *ChunkInfoWithBG) GetChunkSize() int32 {
	if m != nil {
		return m.ChunkSize
	}
	return 0
}

func (m *ChunkInfoWithBG) GetBGP() *BGP {
	if m != nil {
		return m.BGP
	}
	return nil
}

// web -> leader metanode
type ClusterInfoReq struct {
}

func (m *ClusterInfoReq) Reset()                    { *m = ClusterInfoReq{} }
func (m *ClusterInfoReq) String() string            { return proto.CompactTextString(m) }
func (*ClusterInfoReq) ProtoMessage()               {}
func (*ClusterInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

type ClusterInfoAck struct {
	Ret              int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	MetaNum          int32 `protobuf:"varint,2,opt,name=MetaNum" json:"MetaNum,omitempty"`
	DataNum          int32 `protobuf:"varint,3,opt,name=DataNum" json:"DataNum,omitempty"`
	VolNum           int32 `protobuf:"varint,4,opt,name=VolNum" json:"VolNum,omitempty"`
	ClusterSpace     int32 `protobuf:"varint,5,opt,name=ClusterSpace" json:"ClusterSpace,omitempty"`
	ClusterFreeSpace int32 `protobuf:"varint,6,opt,name=ClusterFreeSpace" json:"ClusterFreeSpace,omitempty"`
	IO               int32 `protobuf:"varint,7,opt,name=IO" json:"IO,omitempty"`
	IOPS             int32 `protobuf:"varint,8,opt,name=IOPS" json:"IOPS,omitempty"`
}

func (m *ClusterInfoAck) Reset()                    { *m = ClusterInfoAck{} }
func (m *ClusterInfoAck) String() string            { return proto.CompactTextString(m) }
func (*ClusterInfoAck) ProtoMessage()               {}
func (*ClusterInfoAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *ClusterInfoAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *ClusterInfoAck) GetMetaNum() int32 {
	if m != nil {
		return m.MetaNum
	}
	return 0
}

func (m *ClusterInfoAck) GetDataNum() int32 {
	if m != nil {
		return m.DataNum
	}
	return 0
}

func (m *ClusterInfoAck) GetVolNum() int32 {
	if m != nil {
		return m.VolNum
	}
	return 0
}

func (m *ClusterInfoAck) GetClusterSpace() int32 {
	if m != nil {
		return m.ClusterSpace
	}
	return 0
}

func (m *ClusterInfoAck) GetClusterFreeSpace() int32 {
	if m != nil {
		return m.ClusterFreeSpace
	}
	return 0
}

func (m *ClusterInfoAck) GetIO() int32 {
	if m != nil {
		return m.IO
	}
	return 0
}

func (m *ClusterInfoAck) GetIOPS() int32 {
	if m != nil {
		return m.IOPS
	}
	return 0
}

// web -> each metanode
type MetaNodeInfoReq struct {
}

func (m *MetaNodeInfoReq) Reset()                    { *m = MetaNodeInfoReq{} }
func (m *MetaNodeInfoReq) String() string            { return proto.CompactTextString(m) }
func (*MetaNodeInfoReq) ProtoMessage()               {}
func (*MetaNodeInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

type MetaNodeInfoAck struct {
	Ret          int32  `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	MetaID       uint64 `protobuf:"varint,2,opt,name=MetaID" json:"MetaID,omitempty"`
	IsLeader     bool   `protobuf:"varint,3,opt,name=IsLeader" json:"IsLeader,omitempty"`
	AppliedIndex uint64 `protobuf:"varint,4,opt,name=AppliedIndex" json:"AppliedIndex,omitempty"`
}

func (m *MetaNodeInfoAck) Reset()                    { *m = MetaNodeInfoAck{} }
func (m *MetaNodeInfoAck) String() string            { return proto.CompactTextString(m) }
func (*MetaNodeInfoAck) ProtoMessage()               {}
func (*MetaNodeInfoAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

func (m *MetaNodeInfoAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *MetaNodeInfoAck) GetMetaID() uint64 {
	if m != nil {
		return m.MetaID
	}
	return 0
}

func (m *MetaNodeInfoAck) GetIsLeader() bool {
	if m != nil {
		return m.IsLeader
	}
	return false
}

func (m *MetaNodeInfoAck) GetAppliedIndex() uint64 {
	if m != nil {
		return m.AppliedIndex
	}
	return 0
}

// web -> leader metanode
type DataNodeInfoReq struct {
}

func (m *DataNodeInfoReq) Reset()                    { *m = DataNodeInfoReq{} }
func (m *DataNodeInfoReq) String() string            { return proto.CompactTextString(m) }
func (*DataNodeInfoReq) ProtoMessage()               {}
func (*DataNodeInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

type DataNodeInfoAck struct {
	Ret       int32       `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	DataNodes []*DataNode `protobuf:"bytes,2,rep,name=DataNodes" json:"DataNodes,omitempty"`
}

func (m *DataNodeInfoAck) Reset()                    { *m = DataNodeInfoAck{} }
func (m *DataNodeInfoAck) String() string            { return proto.CompactTextString(m) }
func (*DataNodeInfoAck) ProtoMessage()               {}
func (*DataNodeInfoAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *DataNodeInfoAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *DataNodeInfoAck) GetDataNodes() []*DataNode {
	if m != nil {
		return m.DataNodes
	}
	return nil
}

// web -> cluster leader metanode
type VolumeInfosReq struct {
}

func (m *VolumeInfosReq) Reset()                    { *m = VolumeInfosReq{} }
func (m *VolumeInfosReq) String() string            { return proto.CompactTextString(m) }
func (*VolumeInfosReq) ProtoMessage()               {}
func (*VolumeInfosReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

type VolumeInfosAck struct {
	Ret     int32     `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	Volumes []*Volume `protobuf:"bytes,2,rep,name=Volumes" json:"Volumes,omitempty"`
}

func (m *VolumeInfosAck) Reset()                    { *m = VolumeInfosAck{} }
func (m *VolumeInfosAck) String() string            { return proto.CompactTextString(m) }
func (*VolumeInfosAck) ProtoMessage()               {}
func (*VolumeInfosAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

func (m *VolumeInfosAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *VolumeInfosAck) GetVolumes() []*Volume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

// web -> the datanode or metanode (ip:port)
type NodeMonitorReq struct {
}

func (m *NodeMonitorReq) Reset()                    { *m = NodeMonitorReq{} }
func (m *NodeMonitorReq) String() string            { return proto.CompactTextString(m) }
func (*NodeMonitorReq) ProtoMessage()               {}
func (*NodeMonitorReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

type NodeMonitorAck struct {
	Ret      int32     `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	NodeInfo *NodeInfo `protobuf:"bytes,2,opt,name=NodeInfo" json:"NodeInfo,omitempty"`
}

func (m *NodeMonitorAck) Reset()                    { *m = NodeMonitorAck{} }
func (m *NodeMonitorAck) String() string            { return proto.CompactTextString(m) }
func (*NodeMonitorAck) ProtoMessage()               {}
func (*NodeMonitorAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78} }

func (m *NodeMonitorAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *NodeMonitorAck) GetNodeInfo() *NodeInfo {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

type NodeInfo struct {
	CpuUsage        float64   `protobuf:"fixed64,1,opt,name=CpuUsage" json:"CpuUsage,omitempty"`
	CpuLoad         float64   `protobuf:"fixed64,2,opt,name=CpuLoad" json:"CpuLoad,omitempty"`
	FreeMem         uint64    `protobuf:"varint,3,opt,name=FreeMem" json:"FreeMem,omitempty"`
	TotalMem        uint64    `protobuf:"varint,4,opt,name=TotalMem" json:"TotalMem,omitempty"`
	MemUsedPercent  float64   `protobuf:"fixed64,5,opt,name=MemUsedPercent" json:"MemUsedPercent,omitempty"`
	PathTotal       uint64    `protobuf:"varint,6,opt,name=PathTotal" json:"PathTotal,omitempty"`
	PathFree        uint64    `protobuf:"varint,7,opt,name=PathFree" json:"PathFree,omitempty"`
	PathUsedPercent float64   `protobuf:"fixed64,8,opt,name=PathUsedPercent" json:"PathUsedPercent,omitempty"`
	DiskIOs         []*DiskIO `protobuf:"bytes,9,rep,name=DiskIOs" json:"DiskIOs,omitempty"`
	NetIOs          []*NetIO  `protobuf:"bytes,10,rep,name=NetIOs" json:"NetIOs,omitempty"`
}

func (m *NodeInfo) Reset()                    { *m = NodeInfo{} }
func (m *NodeInfo) String() string            { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()               {}
func (*NodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

func (m *NodeInfo) GetCpuUsage() float64 {
	if m != nil {
		return m.CpuUsage
	}
	return 0
}

func (m *NodeInfo) GetCpuLoad() float64 {
	if m != nil {
		return m.CpuLoad
	}
	return 0
}

func (m *NodeInfo) GetFreeMem() uint64 {
	if m != nil {
		return m.FreeMem
	}
	return 0
}

func (m *NodeInfo) GetTotalMem() uint64 {
	if m != nil {
		return m.TotalMem
	}
	return 0
}

func (m *NodeInfo) GetMemUsedPercent() float64 {
	if m != nil {
		return m.MemUsedPercent
	}
	return 0
}

func (m *NodeInfo) GetPathTotal() uint64 {
	if m != nil {
		return m.PathTotal
	}
	return 0
}

func (m *NodeInfo) GetPathFree() uint64 {
	if m != nil {
		return m.PathFree
	}
	return 0
}

func (m *NodeInfo) GetPathUsedPercent() float64 {
	if m != nil {
		return m.PathUsedPercent
	}
	return 0
}

func (m *NodeInfo) GetDiskIOs() []*DiskIO {
	if m != nil {
		return m.DiskIOs
	}
	return nil
}

func (m *NodeInfo) GetNetIOs() []*NetIO {
	if m != nil {
		return m.NetIOs
	}
	return nil
}

type DiskIO struct {
	ReadCount      uint64 `protobuf:"varint,1,opt,name=ReadCount" json:"ReadCount,omitempty"`
	WriteCount     uint64 `protobuf:"varint,2,opt,name=WriteCount" json:"WriteCount,omitempty"`
	ReadBytes      uint64 `protobuf:"varint,3,opt,name=ReadBytes" json:"ReadBytes,omitempty"`
	WriteBytes     uint64 `protobuf:"varint,4,opt,name=WriteBytes" json:"WriteBytes,omitempty"`
	IopsInProgress uint64 `protobuf:"varint,5,opt,name=IopsInProgress" json:"IopsInProgress,omitempty"`
	IoTime         uint64 `protobuf:"varint,6,opt,name=IoTime" json:"IoTime,omitempty"`
	WeightedIO     uint64 `protobuf:"varint,7,opt,name=WeightedIO" json:"WeightedIO,omitempty"`
	Name           string `protobuf:"bytes,8,opt,name=Name" json:"Name,omitempty"`
}

func (m *DiskIO) Reset()                    { *m = DiskIO{} }
func (m *DiskIO) String() string            { return proto.CompactTextString(m) }
func (*DiskIO) ProtoMessage()               {}
func (*DiskIO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{80} }

func (m *DiskIO) GetReadCount() uint64 {
	if m != nil {
		return m.ReadCount
	}
	return 0
}

func (m *DiskIO) GetWriteCount() uint64 {
	if m != nil {
		return m.WriteCount
	}
	return 0
}

func (m *DiskIO) GetReadBytes() uint64 {
	if m != nil {
		return m.ReadBytes
	}
	return 0
}

func (m *DiskIO) GetWriteBytes() uint64 {
	if m != nil {
		return m.WriteBytes
	}
	return 0
}

func (m *DiskIO) GetIopsInProgress() uint64 {
	if m != nil {
		return m.IopsInProgress
	}
	return 0
}

func (m *DiskIO) GetIoTime() uint64 {
	if m != nil {
		return m.IoTime
	}
	return 0
}

func (m *DiskIO) GetWeightedIO() uint64 {
	if m != nil {
		return m.WeightedIO
	}
	return 0
}

func (m *DiskIO) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type NetIO struct {
	BytesSent   uint64 `protobuf:"varint,1,opt,name=BytesSent" json:"BytesSent,omitempty"`
	BytesRecv   uint64 `protobuf:"varint,2,opt,name=BytesRecv" json:"BytesRecv,omitempty"`
	PacketsSent uint64 `protobuf:"varint,3,opt,name=PacketsSent" json:"PacketsSent,omitempty"`
	PacketsRecv uint64 `protobuf:"varint,4,opt,name=PacketsRecv" json:"PacketsRecv,omitempty"`
	Errin       uint64 `protobuf:"varint,5,opt,name=Errin" json:"Errin,omitempty"`
	Errout      uint64 `protobuf:"varint,6,opt,name=Errout" json:"Errout,omitempty"`
	Dropin      uint64 `protobuf:"varint,7,opt,name=Dropin" json:"Dropin,omitempty"`
	Dropout     uint64 `protobuf:"varint,8,opt,name=Dropout" json:"Dropout,omitempty"`
	Name        string `protobuf:"bytes,9,opt,name=Name" json:"Name,omitempty"`
}

func (m *NetIO) Reset()                    { *m = NetIO{} }
func (m *NetIO) String() string            { return proto.CompactTextString(m) }
func (*NetIO) ProtoMessage()               {}
func (*NetIO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{81} }

func (m *NetIO) GetBytesSent() uint64 {
	if m != nil {
		return m.BytesSent
	}
	return 0
}

func (m *NetIO) GetBytesRecv() uint64 {
	if m != nil {
		return m.BytesRecv
	}
	return 0
}

func (m *NetIO) GetPacketsSent() uint64 {
	if m != nil {
		return m.PacketsSent
	}
	return 0
}

func (m *NetIO) GetPacketsRecv() uint64 {
	if m != nil {
		return m.PacketsRecv
	}
	return 0
}

func (m *NetIO) GetErrin() uint64 {
	if m != nil {
		return m.Errin
	}
	return 0
}

func (m *NetIO) GetErrout() uint64 {
	if m != nil {
		return m.Errout
	}
	return 0
}

func (m *NetIO) GetDropin() uint64 {
	if m != nil {
		return m.Dropin
	}
	return 0
}

func (m *NetIO) GetDropout() uint64 {
	if m != nil {
		return m.Dropout
	}
	return 0
}

func (m *NetIO) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*NULL)(nil), "mp.NULL")
	proto.RegisterType((*DataNode)(nil), "mp.DataNode")
	proto.RegisterType((*DataNodeRegistryAck)(nil), "mp.DataNodeRegistryAck")
	proto.RegisterType((*UpdateBlkDBAck)(nil), "mp.UpdateBlkDBAck")
	proto.RegisterType((*GetAllDataNodeReq)(nil), "mp.GetAllDataNodeReq")
	proto.RegisterType((*GetAllDataNodeAck)(nil), "mp.GetAllDataNodeAck")
	proto.RegisterType((*DelDataNodeReq)(nil), "mp.DelDataNodeReq")
	proto.RegisterType((*DelDataNodeAck)(nil), "mp.DelDataNodeAck")
	proto.RegisterType((*Volume)(nil), "mp.Volume")
	proto.RegisterType((*Vols)(nil), "mp.Vols")
	proto.RegisterType((*Block)(nil), "mp.Block")
	proto.RegisterType((*BGP)(nil), "mp.BGP")
	proto.RegisterType((*CreateVolReq)(nil), "mp.CreateVolReq")
	proto.RegisterType((*CreateVolAck)(nil), "mp.CreateVolAck")
	proto.RegisterType((*ExpandVolTSReq)(nil), "mp.ExpandVolTSReq")
	proto.RegisterType((*ExpandVolTSAck)(nil), "mp.ExpandVolTSAck")
	proto.RegisterType((*ExpandVolRSReq)(nil), "mp.ExpandVolRSReq")
	proto.RegisterType((*ExpandVolRSAck)(nil), "mp.ExpandVolRSAck")
	proto.RegisterType((*DelVolRSForExpandReq)(nil), "mp.DelVolRSForExpandReq")
	proto.RegisterType((*DelVolRSForExpandAck)(nil), "mp.DelVolRSForExpandAck")
	proto.RegisterType((*DeleteVolReq)(nil), "mp.DeleteVolReq")
	proto.RegisterType((*DeleteVolAck)(nil), "mp.DeleteVolAck")
	proto.RegisterType((*GetVolInfoReq)(nil), "mp.GetVolInfoReq")
	proto.RegisterType((*GetVolInfoAck)(nil), "mp.GetVolInfoAck")
	proto.RegisterType((*MigrateReq)(nil), "mp.MigrateReq")
	proto.RegisterType((*MigrateAck)(nil), "mp.MigrateAck")
	proto.RegisterType((*GetMetaLeaderReq)(nil), "mp.GetMetaLeaderReq")
	proto.RegisterType((*GetMetaLeaderAck)(nil), "mp.GetMetaLeaderAck")
	proto.RegisterType((*CreateNameSpaceReq)(nil), "mp.CreateNameSpaceReq")
	proto.RegisterType((*CreateNameSpaceAck)(nil), "mp.CreateNameSpaceAck")
	proto.RegisterType((*ExpandNameSpaceReq)(nil), "mp.ExpandNameSpaceReq")
	proto.RegisterType((*ExpandNameSpaceAck)(nil), "mp.ExpandNameSpaceAck")
	proto.RegisterType((*SnapShootNameSpaceReq)(nil), "mp.SnapShootNameSpaceReq")
	proto.RegisterType((*SnapShootNameSpaceAck)(nil), "mp.SnapShootNameSpaceAck")
	proto.RegisterType((*DeleteNameSpaceReq)(nil), "mp.DeleteNameSpaceReq")
	proto.RegisterType((*DeleteNameSpaceAck)(nil), "mp.DeleteNameSpaceAck")
	proto.RegisterType((*GetFSInfoReq)(nil), "mp.GetFSInfoReq")
	proto.RegisterType((*GetFSInfoAck)(nil), "mp.GetFSInfoAck")
	proto.RegisterType((*CreateDirDirectReq)(nil), "mp.CreateDirDirectReq")
	proto.RegisterType((*CreateDirDirectAck)(nil), "mp.CreateDirDirectAck")
	proto.RegisterType((*CreateFileDirectReq)(nil), "mp.CreateFileDirectReq")
	proto.RegisterType((*CreateFileDirectAck)(nil), "mp.CreateFileDirectAck")
	proto.RegisterType((*DeleteDirDirectReq)(nil), "mp.DeleteDirDirectReq")
	proto.RegisterType((*DeleteDirDirectAck)(nil), "mp.DeleteDirDirectAck")
	proto.RegisterType((*RenameDirectReq)(nil), "mp.RenameDirectReq")
	proto.RegisterType((*RenameDirectAck)(nil), "mp.RenameDirectAck")
	proto.RegisterType((*DeleteFileDirectReq)(nil), "mp.DeleteFileDirectReq")
	proto.RegisterType((*DeleteFileDirectAck)(nil), "mp.DeleteFileDirectAck")
	proto.RegisterType((*GetInodeInfoDirectReq)(nil), "mp.GetInodeInfoDirectReq")
	proto.RegisterType((*GetInodeInfoDirectAck)(nil), "mp.GetInodeInfoDirectAck")
	proto.RegisterType((*StatDirectReq)(nil), "mp.StatDirectReq")
	proto.RegisterType((*StatDirectAck)(nil), "mp.StatDirectAck")
	proto.RegisterType((*ListDirectReq)(nil), "mp.ListDirectReq")
	proto.RegisterType((*ListDirectAck)(nil), "mp.ListDirectAck")
	proto.RegisterType((*GetFileChunksDirectReq)(nil), "mp.GetFileChunksDirectReq")
	proto.RegisterType((*GetFileChunksDirectAck)(nil), "mp.GetFileChunksDirectAck")
	proto.RegisterType((*AllocateChunkReq)(nil), "mp.AllocateChunkReq")
	proto.RegisterType((*AllocateChunkAck)(nil), "mp.AllocateChunkAck")
	proto.RegisterType((*SyncChunkReq)(nil), "mp.SyncChunkReq")
	proto.RegisterType((*SyncChunkAck)(nil), "mp.SyncChunkAck")
	proto.RegisterType((*AsyncChunkReq)(nil), "mp.AsyncChunkReq")
	proto.RegisterType((*AsyncChunkAck)(nil), "mp.AsyncChunkAck")
	proto.RegisterType((*BlkInfo)(nil), "mp.BlkInfo")
	proto.RegisterType((*InodeInfo)(nil), "mp.InodeInfo")
	proto.RegisterType((*Dirent)(nil), "mp.Dirent")
	proto.RegisterType((*DirentN)(nil), "mp.DirentN")
	proto.RegisterType((*BlockGroup)(nil), "mp.BlockGroup")
	proto.RegisterType((*ChunkInfo)(nil), "mp.ChunkInfo")
	proto.RegisterType((*ChunkInfoWithBG)(nil), "mp.ChunkInfoWithBG")
	proto.RegisterType((*ClusterInfoReq)(nil), "mp.ClusterInfoReq")
	proto.RegisterType((*ClusterInfoAck)(nil), "mp.ClusterInfoAck")
	proto.RegisterType((*MetaNodeInfoReq)(nil), "mp.MetaNodeInfoReq")
	proto.RegisterType((*MetaNodeInfoAck)(nil), "mp.MetaNodeInfoAck")
	proto.RegisterType((*DataNodeInfoReq)(nil), "mp.DataNodeInfoReq")
	proto.RegisterType((*DataNodeInfoAck)(nil), "mp.DataNodeInfoAck")
	proto.RegisterType((*VolumeInfosReq)(nil), "mp.VolumeInfosReq")
	proto.RegisterType((*VolumeInfosAck)(nil), "mp.VolumeInfosAck")
	proto.RegisterType((*NodeMonitorReq)(nil), "mp.NodeMonitorReq")
	proto.RegisterType((*NodeMonitorAck)(nil), "mp.NodeMonitorAck")
	proto.RegisterType((*NodeInfo)(nil), "mp.NodeInfo")
	proto.RegisterType((*DiskIO)(nil), "mp.DiskIO")
	proto.RegisterType((*NetIO)(nil), "mp.NetIO")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MetaNode service

type MetaNodeClient interface {
	// cluster opt
	DataNodeRegistry(ctx context.Context, in *DataNode, opts ...grpc.CallOption) (*DataNodeRegistryAck, error)
	DelDataNode(ctx context.Context, in *DelDataNodeReq, opts ...grpc.CallOption) (*DelDataNodeAck, error)
	CreateVol(ctx context.Context, in *CreateVolReq, opts ...grpc.CallOption) (*CreateVolAck, error)
	ExpandVolTS(ctx context.Context, in *ExpandVolTSReq, opts ...grpc.CallOption) (*ExpandVolTSAck, error)
	ExpandVolRS(ctx context.Context, in *ExpandVolRSReq, opts ...grpc.CallOption) (*ExpandVolRSAck, error)
	DelVolRSForExpand(ctx context.Context, in *DelVolRSForExpandReq, opts ...grpc.CallOption) (*DelVolRSForExpandAck, error)
	DeleteVol(ctx context.Context, in *DeleteVolReq, opts ...grpc.CallOption) (*DeleteVolAck, error)
	Migrate(ctx context.Context, in *MigrateReq, opts ...grpc.CallOption) (*MigrateAck, error)
	// namespace opt
	GetMetaLeader(ctx context.Context, in *GetMetaLeaderReq, opts ...grpc.CallOption) (*GetMetaLeaderAck, error)
	CreateNameSpace(ctx context.Context, in *CreateNameSpaceReq, opts ...grpc.CallOption) (*CreateNameSpaceAck, error)
	ExpandNameSpace(ctx context.Context, in *ExpandNameSpaceReq, opts ...grpc.CallOption) (*ExpandNameSpaceAck, error)
	SnapShotNameSpace(ctx context.Context, in *SnapShootNameSpaceReq, opts ...grpc.CallOption) (*SnapShootNameSpaceAck, error)
	DeleteNameSpace(ctx context.Context, in *DeleteNameSpaceReq, opts ...grpc.CallOption) (*DeleteNameSpaceAck, error)
	GetFSInfo(ctx context.Context, in *GetFSInfoReq, opts ...grpc.CallOption) (*GetFSInfoAck, error)
	// fs meta opt
	CreateDirDirect(ctx context.Context, in *CreateDirDirectReq, opts ...grpc.CallOption) (*CreateDirDirectAck, error)
	StatDirect(ctx context.Context, in *StatDirectReq, opts ...grpc.CallOption) (*StatDirectAck, error)
	GetInodeInfoDirect(ctx context.Context, in *GetInodeInfoDirectReq, opts ...grpc.CallOption) (*GetInodeInfoDirectAck, error)
	ListDirect(ctx context.Context, in *ListDirectReq, opts ...grpc.CallOption) (*ListDirectAck, error)
	DeleteDirDirect(ctx context.Context, in *DeleteDirDirectReq, opts ...grpc.CallOption) (*DeleteDirDirectAck, error)
	RenameDirect(ctx context.Context, in *RenameDirectReq, opts ...grpc.CallOption) (*RenameDirectAck, error)
	CreateFileDirect(ctx context.Context, in *CreateFileDirectReq, opts ...grpc.CallOption) (*CreateFileDirectAck, error)
	DeleteFileDirect(ctx context.Context, in *DeleteFileDirectReq, opts ...grpc.CallOption) (*DeleteFileDirectAck, error)
	GetFileChunksDirect(ctx context.Context, in *GetFileChunksDirectReq, opts ...grpc.CallOption) (*GetFileChunksDirectAck, error)
	AllocateChunk(ctx context.Context, in *AllocateChunkReq, opts ...grpc.CallOption) (*AllocateChunkAck, error)
	SyncChunk(ctx context.Context, in *SyncChunkReq, opts ...grpc.CallOption) (*SyncChunkAck, error)
	AsyncChunk(ctx context.Context, in *AsyncChunkReq, opts ...grpc.CallOption) (*AsyncChunkAck, error)
	// Web Info
	ClusterInfo(ctx context.Context, in *ClusterInfoReq, opts ...grpc.CallOption) (*ClusterInfoAck, error)
	GetDataNode(ctx context.Context, in *GetAllDataNodeReq, opts ...grpc.CallOption) (*GetAllDataNodeAck, error)
	MetaNodeInfo(ctx context.Context, in *MetaNodeInfoReq, opts ...grpc.CallOption) (*MetaNodeInfoAck, error)
	VolumeInfos(ctx context.Context, in *VolumeInfosReq, opts ...grpc.CallOption) (*VolumeInfosAck, error)
	GetVolInfo(ctx context.Context, in *GetVolInfoReq, opts ...grpc.CallOption) (*GetVolInfoAck, error)
	NodeMonitor(ctx context.Context, in *NodeMonitorReq, opts ...grpc.CallOption) (*NodeMonitorAck, error)
}

type metaNodeClient struct {
	cc *grpc.ClientConn
}

func NewMetaNodeClient(cc *grpc.ClientConn) MetaNodeClient {
	return &metaNodeClient{cc}
}

func (c *metaNodeClient) DataNodeRegistry(ctx context.Context, in *DataNode, opts ...grpc.CallOption) (*DataNodeRegistryAck, error) {
	out := new(DataNodeRegistryAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/DataNodeRegistry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) DelDataNode(ctx context.Context, in *DelDataNodeReq, opts ...grpc.CallOption) (*DelDataNodeAck, error) {
	out := new(DelDataNodeAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/DelDataNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) CreateVol(ctx context.Context, in *CreateVolReq, opts ...grpc.CallOption) (*CreateVolAck, error) {
	out := new(CreateVolAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/CreateVol", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) ExpandVolTS(ctx context.Context, in *ExpandVolTSReq, opts ...grpc.CallOption) (*ExpandVolTSAck, error) {
	out := new(ExpandVolTSAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/ExpandVolTS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) ExpandVolRS(ctx context.Context, in *ExpandVolRSReq, opts ...grpc.CallOption) (*ExpandVolRSAck, error) {
	out := new(ExpandVolRSAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/ExpandVolRS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) DelVolRSForExpand(ctx context.Context, in *DelVolRSForExpandReq, opts ...grpc.CallOption) (*DelVolRSForExpandAck, error) {
	out := new(DelVolRSForExpandAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/DelVolRSForExpand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) DeleteVol(ctx context.Context, in *DeleteVolReq, opts ...grpc.CallOption) (*DeleteVolAck, error) {
	out := new(DeleteVolAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/DeleteVol", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) Migrate(ctx context.Context, in *MigrateReq, opts ...grpc.CallOption) (*MigrateAck, error) {
	out := new(MigrateAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/Migrate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) GetMetaLeader(ctx context.Context, in *GetMetaLeaderReq, opts ...grpc.CallOption) (*GetMetaLeaderAck, error) {
	out := new(GetMetaLeaderAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/GetMetaLeader", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) CreateNameSpace(ctx context.Context, in *CreateNameSpaceReq, opts ...grpc.CallOption) (*CreateNameSpaceAck, error) {
	out := new(CreateNameSpaceAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/CreateNameSpace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) ExpandNameSpace(ctx context.Context, in *ExpandNameSpaceReq, opts ...grpc.CallOption) (*ExpandNameSpaceAck, error) {
	out := new(ExpandNameSpaceAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/ExpandNameSpace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) SnapShotNameSpace(ctx context.Context, in *SnapShootNameSpaceReq, opts ...grpc.CallOption) (*SnapShootNameSpaceAck, error) {
	out := new(SnapShootNameSpaceAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/SnapShotNameSpace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) DeleteNameSpace(ctx context.Context, in *DeleteNameSpaceReq, opts ...grpc.CallOption) (*DeleteNameSpaceAck, error) {
	out := new(DeleteNameSpaceAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/DeleteNameSpace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) GetFSInfo(ctx context.Context, in *GetFSInfoReq, opts ...grpc.CallOption) (*GetFSInfoAck, error) {
	out := new(GetFSInfoAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/GetFSInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) CreateDirDirect(ctx context.Context, in *CreateDirDirectReq, opts ...grpc.CallOption) (*CreateDirDirectAck, error) {
	out := new(CreateDirDirectAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/CreateDirDirect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) StatDirect(ctx context.Context, in *StatDirectReq, opts ...grpc.CallOption) (*StatDirectAck, error) {
	out := new(StatDirectAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/StatDirect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) GetInodeInfoDirect(ctx context.Context, in *GetInodeInfoDirectReq, opts ...grpc.CallOption) (*GetInodeInfoDirectAck, error) {
	out := new(GetInodeInfoDirectAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/GetInodeInfoDirect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) ListDirect(ctx context.Context, in *ListDirectReq, opts ...grpc.CallOption) (*ListDirectAck, error) {
	out := new(ListDirectAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/ListDirect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) DeleteDirDirect(ctx context.Context, in *DeleteDirDirectReq, opts ...grpc.CallOption) (*DeleteDirDirectAck, error) {
	out := new(DeleteDirDirectAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/DeleteDirDirect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) RenameDirect(ctx context.Context, in *RenameDirectReq, opts ...grpc.CallOption) (*RenameDirectAck, error) {
	out := new(RenameDirectAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/RenameDirect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) CreateFileDirect(ctx context.Context, in *CreateFileDirectReq, opts ...grpc.CallOption) (*CreateFileDirectAck, error) {
	out := new(CreateFileDirectAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/CreateFileDirect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) DeleteFileDirect(ctx context.Context, in *DeleteFileDirectReq, opts ...grpc.CallOption) (*DeleteFileDirectAck, error) {
	out := new(DeleteFileDirectAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/DeleteFileDirect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) GetFileChunksDirect(ctx context.Context, in *GetFileChunksDirectReq, opts ...grpc.CallOption) (*GetFileChunksDirectAck, error) {
	out := new(GetFileChunksDirectAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/GetFileChunksDirect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) AllocateChunk(ctx context.Context, in *AllocateChunkReq, opts ...grpc.CallOption) (*AllocateChunkAck, error) {
	out := new(AllocateChunkAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/AllocateChunk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) SyncChunk(ctx context.Context, in *SyncChunkReq, opts ...grpc.CallOption) (*SyncChunkAck, error) {
	out := new(SyncChunkAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/SyncChunk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) AsyncChunk(ctx context.Context, in *AsyncChunkReq, opts ...grpc.CallOption) (*AsyncChunkAck, error) {
	out := new(AsyncChunkAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/AsyncChunk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) ClusterInfo(ctx context.Context, in *ClusterInfoReq, opts ...grpc.CallOption) (*ClusterInfoAck, error) {
	out := new(ClusterInfoAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/ClusterInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) GetDataNode(ctx context.Context, in *GetAllDataNodeReq, opts ...grpc.CallOption) (*GetAllDataNodeAck, error) {
	out := new(GetAllDataNodeAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/GetDataNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) MetaNodeInfo(ctx context.Context, in *MetaNodeInfoReq, opts ...grpc.CallOption) (*MetaNodeInfoAck, error) {
	out := new(MetaNodeInfoAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/MetaNodeInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) VolumeInfos(ctx context.Context, in *VolumeInfosReq, opts ...grpc.CallOption) (*VolumeInfosAck, error) {
	out := new(VolumeInfosAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/VolumeInfos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) GetVolInfo(ctx context.Context, in *GetVolInfoReq, opts ...grpc.CallOption) (*GetVolInfoAck, error) {
	out := new(GetVolInfoAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/GetVolInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) NodeMonitor(ctx context.Context, in *NodeMonitorReq, opts ...grpc.CallOption) (*NodeMonitorAck, error) {
	out := new(NodeMonitorAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/NodeMonitor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MetaNode service

type MetaNodeServer interface {
	// cluster opt
	DataNodeRegistry(context.Context, *DataNode) (*DataNodeRegistryAck, error)
	DelDataNode(context.Context, *DelDataNodeReq) (*DelDataNodeAck, error)
	CreateVol(context.Context, *CreateVolReq) (*CreateVolAck, error)
	ExpandVolTS(context.Context, *ExpandVolTSReq) (*ExpandVolTSAck, error)
	ExpandVolRS(context.Context, *ExpandVolRSReq) (*ExpandVolRSAck, error)
	DelVolRSForExpand(context.Context, *DelVolRSForExpandReq) (*DelVolRSForExpandAck, error)
	DeleteVol(context.Context, *DeleteVolReq) (*DeleteVolAck, error)
	Migrate(context.Context, *MigrateReq) (*MigrateAck, error)
	// namespace opt
	GetMetaLeader(context.Context, *GetMetaLeaderReq) (*GetMetaLeaderAck, error)
	CreateNameSpace(context.Context, *CreateNameSpaceReq) (*CreateNameSpaceAck, error)
	ExpandNameSpace(context.Context, *ExpandNameSpaceReq) (*ExpandNameSpaceAck, error)
	SnapShotNameSpace(context.Context, *SnapShootNameSpaceReq) (*SnapShootNameSpaceAck, error)
	DeleteNameSpace(context.Context, *DeleteNameSpaceReq) (*DeleteNameSpaceAck, error)
	GetFSInfo(context.Context, *GetFSInfoReq) (*GetFSInfoAck, error)
	// fs meta opt
	CreateDirDirect(context.Context, *CreateDirDirectReq) (*CreateDirDirectAck, error)
	StatDirect(context.Context, *StatDirectReq) (*StatDirectAck, error)
	GetInodeInfoDirect(context.Context, *GetInodeInfoDirectReq) (*GetInodeInfoDirectAck, error)
	ListDirect(context.Context, *ListDirectReq) (*ListDirectAck, error)
	DeleteDirDirect(context.Context, *DeleteDirDirectReq) (*DeleteDirDirectAck, error)
	RenameDirect(context.Context, *RenameDirectReq) (*RenameDirectAck, error)
	CreateFileDirect(context.Context, *CreateFileDirectReq) (*CreateFileDirectAck, error)
	DeleteFileDirect(context.Context, *DeleteFileDirectReq) (*DeleteFileDirectAck, error)
	GetFileChunksDirect(context.Context, *GetFileChunksDirectReq) (*GetFileChunksDirectAck, error)
	AllocateChunk(context.Context, *AllocateChunkReq) (*AllocateChunkAck, error)
	SyncChunk(context.Context, *SyncChunkReq) (*SyncChunkAck, error)
	AsyncChunk(context.Context, *AsyncChunkReq) (*AsyncChunkAck, error)
	// Web Info
	ClusterInfo(context.Context, *ClusterInfoReq) (*ClusterInfoAck, error)
	GetDataNode(context.Context, *GetAllDataNodeReq) (*GetAllDataNodeAck, error)
	MetaNodeInfo(context.Context, *MetaNodeInfoReq) (*MetaNodeInfoAck, error)
	VolumeInfos(context.Context, *VolumeInfosReq) (*VolumeInfosAck, error)
	GetVolInfo(context.Context, *GetVolInfoReq) (*GetVolInfoAck, error)
	NodeMonitor(context.Context, *NodeMonitorReq) (*NodeMonitorAck, error)
}

func RegisterMetaNodeServer(s *grpc.Server, srv MetaNodeServer) {
	s.RegisterService(&_MetaNode_serviceDesc, srv)
}

func _MetaNode_DataNodeRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).DataNodeRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/DataNodeRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).DataNodeRegistry(ctx, req.(*DataNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_DelDataNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDataNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).DelDataNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/DelDataNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).DelDataNode(ctx, req.(*DelDataNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_CreateVol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).CreateVol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/CreateVol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).CreateVol(ctx, req.(*CreateVolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_ExpandVolTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpandVolTSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).ExpandVolTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/ExpandVolTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).ExpandVolTS(ctx, req.(*ExpandVolTSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_ExpandVolRS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpandVolRSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).ExpandVolRS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/ExpandVolRS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).ExpandVolRS(ctx, req.(*ExpandVolRSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_DelVolRSForExpand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelVolRSForExpandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).DelVolRSForExpand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/DelVolRSForExpand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).DelVolRSForExpand(ctx, req.(*DelVolRSForExpandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_DeleteVol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).DeleteVol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/DeleteVol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).DeleteVol(ctx, req.(*DeleteVolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_Migrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).Migrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/Migrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).Migrate(ctx, req.(*MigrateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_GetMetaLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetaLeaderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).GetMetaLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/GetMetaLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).GetMetaLeader(ctx, req.(*GetMetaLeaderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_CreateNameSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNameSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).CreateNameSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/CreateNameSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).CreateNameSpace(ctx, req.(*CreateNameSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_ExpandNameSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpandNameSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).ExpandNameSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/ExpandNameSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).ExpandNameSpace(ctx, req.(*ExpandNameSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_SnapShotNameSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapShootNameSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).SnapShotNameSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/SnapShotNameSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).SnapShotNameSpace(ctx, req.(*SnapShootNameSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_DeleteNameSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNameSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).DeleteNameSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/DeleteNameSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).DeleteNameSpace(ctx, req.(*DeleteNameSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_GetFSInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFSInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).GetFSInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/GetFSInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).GetFSInfo(ctx, req.(*GetFSInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_CreateDirDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDirDirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).CreateDirDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/CreateDirDirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).CreateDirDirect(ctx, req.(*CreateDirDirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_StatDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatDirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).StatDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/StatDirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).StatDirect(ctx, req.(*StatDirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_GetInodeInfoDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInodeInfoDirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).GetInodeInfoDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/GetInodeInfoDirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).GetInodeInfoDirect(ctx, req.(*GetInodeInfoDirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_ListDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).ListDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/ListDirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).ListDirect(ctx, req.(*ListDirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_DeleteDirDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDirDirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).DeleteDirDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/DeleteDirDirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).DeleteDirDirect(ctx, req.(*DeleteDirDirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_RenameDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameDirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).RenameDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/RenameDirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).RenameDirect(ctx, req.(*RenameDirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_CreateFileDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileDirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).CreateFileDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/CreateFileDirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).CreateFileDirect(ctx, req.(*CreateFileDirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_DeleteFileDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileDirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).DeleteFileDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/DeleteFileDirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).DeleteFileDirect(ctx, req.(*DeleteFileDirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_GetFileChunksDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileChunksDirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).GetFileChunksDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/GetFileChunksDirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).GetFileChunksDirect(ctx, req.(*GetFileChunksDirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_AllocateChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateChunkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).AllocateChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/AllocateChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).AllocateChunk(ctx, req.(*AllocateChunkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_SyncChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncChunkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).SyncChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/SyncChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).SyncChunk(ctx, req.(*SyncChunkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_AsyncChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AsyncChunkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).AsyncChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/AsyncChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).AsyncChunk(ctx, req.(*AsyncChunkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_ClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).ClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/ClusterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).ClusterInfo(ctx, req.(*ClusterInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_GetDataNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDataNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).GetDataNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/GetDataNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).GetDataNode(ctx, req.(*GetAllDataNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_MetaNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaNodeInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).MetaNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/MetaNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).MetaNodeInfo(ctx, req.(*MetaNodeInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_VolumeInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeInfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).VolumeInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/VolumeInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).VolumeInfos(ctx, req.(*VolumeInfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_GetVolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVolInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).GetVolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/GetVolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).GetVolInfo(ctx, req.(*GetVolInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_NodeMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMonitorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).NodeMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/NodeMonitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).NodeMonitor(ctx, req.(*NodeMonitorReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetaNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mp.MetaNode",
	HandlerType: (*MetaNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DataNodeRegistry",
			Handler:    _MetaNode_DataNodeRegistry_Handler,
		},
		{
			MethodName: "DelDataNode",
			Handler:    _MetaNode_DelDataNode_Handler,
		},
		{
			MethodName: "CreateVol",
			Handler:    _MetaNode_CreateVol_Handler,
		},
		{
			MethodName: "ExpandVolTS",
			Handler:    _MetaNode_ExpandVolTS_Handler,
		},
		{
			MethodName: "ExpandVolRS",
			Handler:    _MetaNode_ExpandVolRS_Handler,
		},
		{
			MethodName: "DelVolRSForExpand",
			Handler:    _MetaNode_DelVolRSForExpand_Handler,
		},
		{
			MethodName: "DeleteVol",
			Handler:    _MetaNode_DeleteVol_Handler,
		},
		{
			MethodName: "Migrate",
			Handler:    _MetaNode_Migrate_Handler,
		},
		{
			MethodName: "GetMetaLeader",
			Handler:    _MetaNode_GetMetaLeader_Handler,
		},
		{
			MethodName: "CreateNameSpace",
			Handler:    _MetaNode_CreateNameSpace_Handler,
		},
		{
			MethodName: "ExpandNameSpace",
			Handler:    _MetaNode_ExpandNameSpace_Handler,
		},
		{
			MethodName: "SnapShotNameSpace",
			Handler:    _MetaNode_SnapShotNameSpace_Handler,
		},
		{
			MethodName: "DeleteNameSpace",
			Handler:    _MetaNode_DeleteNameSpace_Handler,
		},
		{
			MethodName: "GetFSInfo",
			Handler:    _MetaNode_GetFSInfo_Handler,
		},
		{
			MethodName: "CreateDirDirect",
			Handler:    _MetaNode_CreateDirDirect_Handler,
		},
		{
			MethodName: "StatDirect",
			Handler:    _MetaNode_StatDirect_Handler,
		},
		{
			MethodName: "GetInodeInfoDirect",
			Handler:    _MetaNode_GetInodeInfoDirect_Handler,
		},
		{
			MethodName: "ListDirect",
			Handler:    _MetaNode_ListDirect_Handler,
		},
		{
			MethodName: "DeleteDirDirect",
			Handler:    _MetaNode_DeleteDirDirect_Handler,
		},
		{
			MethodName: "RenameDirect",
			Handler:    _MetaNode_RenameDirect_Handler,
		},
		{
			MethodName: "CreateFileDirect",
			Handler:    _MetaNode_CreateFileDirect_Handler,
		},
		{
			MethodName: "DeleteFileDirect",
			Handler:    _MetaNode_DeleteFileDirect_Handler,
		},
		{
			MethodName: "GetFileChunksDirect",
			Handler:    _MetaNode_GetFileChunksDirect_Handler,
		},
		{
			MethodName: "AllocateChunk",
			Handler:    _MetaNode_AllocateChunk_Handler,
		},
		{
			MethodName: "SyncChunk",
			Handler:    _MetaNode_SyncChunk_Handler,
		},
		{
			MethodName: "AsyncChunk",
			Handler:    _MetaNode_AsyncChunk_Handler,
		},
		{
			MethodName: "ClusterInfo",
			Handler:    _MetaNode_ClusterInfo_Handler,
		},
		{
			MethodName: "GetDataNode",
			Handler:    _MetaNode_GetDataNode_Handler,
		},
		{
			MethodName: "MetaNodeInfo",
			Handler:    _MetaNode_MetaNodeInfo_Handler,
		},
		{
			MethodName: "VolumeInfos",
			Handler:    _MetaNode_VolumeInfos_Handler,
		},
		{
			MethodName: "GetVolInfo",
			Handler:    _MetaNode_GetVolInfo_Handler,
		},
		{
			MethodName: "NodeMonitor",
			Handler:    _MetaNode_NodeMonitor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metanode.proto",
}

func init() { proto.RegisterFile("metanode.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5a, 0xef, 0x6e, 0x23, 0x49,
	0x11, 0x67, 0xfc, 0x2f, 0x76, 0x25, 0x71, 0xbc, 0x9d, 0xdd, 0x3d, 0xdf, 0xb0, 0x5a, 0x65, 0xe7,
	0xf6, 0x72, 0xe1, 0x0e, 0xad, 0x8e, 0x3d, 0x24, 0x24, 0xd8, 0x3d, 0x94, 0xc4, 0x1b, 0xaf, 0x45,
	0xe2, 0x78, 0xdb, 0x9b, 0x44, 0xa0, 0x13, 0x62, 0xb0, 0x7b, 0x93, 0x51, 0xc6, 0x1e, 0xdf, 0x4c,
	0x9b, 0xbb, 0xc0, 0x03, 0xf0, 0x08, 0x7c, 0x41, 0x42, 0xe2, 0x01, 0x78, 0x03, 0x3e, 0xf1, 0x91,
	0xb7, 0xe0, 0x29, 0x90, 0xf8, 0x82, 0xaa, 0xbb, 0xa7, 0xa7, 0x67, 0xa6, 0x7d, 0x1c, 0x21, 0x7c,
	0x9b, 0xfa, 0x75, 0x57, 0x75, 0x75, 0x75, 0x75, 0x75, 0xf7, 0xcf, 0x86, 0xf6, 0x8c, 0x71, 0x7f,
	0x1e, 0x4d, 0xd9, 0xb3, 0x45, 0x1c, 0xf1, 0x88, 0x54, 0x66, 0x0b, 0xaf, 0x01, 0xb5, 0xe1, 0xd9,
	0xf1, 0xb1, 0xf7, 0x17, 0x07, 0x9a, 0x3d, 0x9f, 0xfb, 0xc3, 0x68, 0xca, 0x08, 0x81, 0xda, 0xeb,
	0x28, 0xe1, 0x5d, 0x67, 0xc7, 0xd9, 0x6b, 0x51, 0xf1, 0x4d, 0x1e, 0x03, 0x9c, 0x44, 0xcb, 0x39,
	0x1f, 0x45, 0xc1, 0x9c, 0x77, 0x2b, 0xa2, 0xc5, 0x40, 0x50, 0xe7, 0x6d, 0xc0, 0xe2, 0x6e, 0x55,
	0xea, 0xe0, 0x37, 0x71, 0xa1, 0x79, 0xe8, 0x2f, 0xfc, 0x49, 0xc0, 0x6f, 0xba, 0xb5, 0x1d, 0x67,
	0xaf, 0x4e, 0xb5, 0x8c, 0xfd, 0xcf, 0x12, 0x36, 0xed, 0xd6, 0x05, 0x2e, 0xbe, 0x11, 0x3b, 0x8a,
	0x19, 0xeb, 0x36, 0x24, 0x86, 0xdf, 0xe4, 0x21, 0x34, 0xc6, 0xdc, 0xe7, 0xcb, 0xa4, 0xbb, 0x26,
	0x50, 0x25, 0x79, 0x1f, 0xc1, 0x76, 0xea, 0x2f, 0x65, 0x97, 0x41, 0xc2, 0xe3, 0x9b, 0xfd, 0xc9,
	0x35, 0xe9, 0x40, 0x95, 0x32, 0xe9, 0x79, 0x9d, 0xe2, 0xa7, 0xe7, 0x41, 0xfb, 0x6c, 0x31, 0xf5,
	0x39, 0x3b, 0x08, 0xaf, 0x7b, 0x07, 0xf6, 0x3e, 0xdb, 0x70, 0xaf, 0xcf, 0xf8, 0x7e, 0x18, 0x66,
	0x26, 0xbf, 0xf4, 0xde, 0x14, 0x41, 0xab, 0x2e, 0xf9, 0x18, 0x5a, 0x69, 0x87, 0xa4, 0x5b, 0xd9,
	0xa9, 0xee, 0xad, 0x3f, 0xdf, 0x78, 0x36, 0x5b, 0x3c, 0xd3, 0xa6, 0xb2, 0x66, 0xef, 0x29, 0xb4,
	0x7b, 0xcc, 0x1c, 0xc4, 0x16, 0x6a, 0xf4, 0xd8, 0xe8, 0x65, 0xf7, 0xf8, 0x8f, 0x0e, 0x34, 0xce,
	0xa3, 0x70, 0x39, 0x13, 0xab, 0x75, 0x76, 0x36, 0xe8, 0xa5, 0x26, 0xf0, 0x1b, 0xb1, 0xa1, 0x3f,
	0x63, 0x6a, 0x9d, 0xc4, 0xb7, 0x75, 0x85, 0x1e, 0x41, 0xeb, 0x6d, 0xc4, 0xfd, 0x70, 0x1c, 0xfc,
	0x96, 0xa9, 0x25, 0xca, 0x00, 0xf2, 0x14, 0x36, 0xf7, 0xc3, 0x30, 0x9a, 0xf8, 0x9c, 0x4d, 0x45,
	0x0f, 0xb9, 0x58, 0x79, 0x10, 0xed, 0xd2, 0xfe, 0xa0, 0x27, 0x56, 0xad, 0x46, 0xc5, 0xb7, 0xf7,
	0x7d, 0xa8, 0x9d, 0x47, 0x61, 0x42, 0x9e, 0xc2, 0x9a, 0xf4, 0x32, 0xe9, 0x3a, 0x22, 0x34, 0x80,
	0xa1, 0x91, 0x10, 0x4d, 0x9b, 0xbc, 0xdf, 0x3b, 0x50, 0x3f, 0x08, 0xa3, 0xc9, 0x35, 0xb9, 0x8f,
	0x1f, 0xd7, 0x6a, 0x32, 0x35, 0x2a, 0x05, 0x1d, 0xa4, 0x8a, 0x91, 0x8f, 0x04, 0x6a, 0x23, 0x9f,
	0x5f, 0xa5, 0xb3, 0xc1, 0x6f, 0x23, 0x57, 0x6a, 0x66, 0xae, 0x60, 0xdf, 0x03, 0xf4, 0xb0, 0x2e,
	0x3d, 0xc4, 0x6f, 0x1c, 0xe9, 0x3c, 0x0a, 0x95, 0xdb, 0x2d, 0x2a, 0x05, 0x6f, 0x0f, 0xaa, 0x07,
	0xfd, 0x11, 0x79, 0x02, 0x0d, 0xe1, 0x4f, 0xea, 0x75, 0x0b, 0xbd, 0x16, 0x08, 0x55, 0x0d, 0xde,
	0x17, 0xb0, 0x71, 0x18, 0x33, 0x9f, 0xb3, 0xf3, 0x28, 0xc4, 0x85, 0xec, 0x8a, 0x99, 0x8a, 0xa0,
	0xcb, 0x85, 0x48, 0x45, 0xdc, 0x39, 0xe3, 0x85, 0x3f, 0x61, 0x6f, 0x96, 0x11, 0xf7, 0xc5, 0x1c,
	0xea, 0xd4, 0x40, 0x6c, 0xeb, 0xe2, 0x9d, 0x1b, 0xd6, 0xed, 0x69, 0x97, 0xae, 0x7a, 0xc5, 0x58,
	0xf5, 0x1d, 0x58, 0xa7, 0xfe, 0x3b, 0xde, 0x8f, 0xa3, 0xe5, 0x62, 0xd0, 0x13, 0x06, 0x6b, 0xd4,
	0x84, 0xbc, 0xd7, 0xd0, 0x7e, 0xf5, 0xf5, 0xc2, 0x9f, 0x4f, 0xcf, 0xa3, 0xf0, 0xed, 0x18, 0xfd,
	0xd6, 0x71, 0x70, 0x8c, 0x38, 0xa0, 0x25, 0xd9, 0xcf, 0x74, 0xda, 0x84, 0x30, 0x49, 0x0d, 0x4b,
	0xf6, 0x24, 0xdd, 0x35, 0xfa, 0xd0, 0xd5, 0xa3, 0x79, 0x3f, 0xcd, 0xf5, 0xb3, 0xcf, 0xf7, 0xbb,
	0xb8, 0x86, 0xa3, 0xb1, 0xda, 0x61, 0x6b, 0x62, 0x41, 0xfa, 0x23, 0x2a, 0x40, 0xaf, 0x0f, 0xf7,
	0x7b, 0x2c, 0x14, 0xda, 0x47, 0x51, 0x2c, 0x6d, 0xa9, 0xdd, 0x55, 0xda, 0x1a, 0xdf, 0x68, 0x68,
	0xcf, 0x62, 0x68, 0x55, 0x59, 0xd9, 0xe8, 0xb1, 0x90, 0xe9, 0xf5, 0xb7, 0x0c, 0xe5, 0xed, 0x18,
	0x7d, 0xec, 0x56, 0x3e, 0x80, 0xcd, 0x3e, 0xe3, 0x18, 0x85, 0xf9, 0xbb, 0x68, 0x95, 0x99, 0xcf,
	0xcd, 0x4e, 0xb7, 0x88, 0xce, 0xa7, 0x00, 0x27, 0xc1, 0x65, 0xec, 0x73, 0x51, 0x71, 0xd0, 0x71,
	0x55, 0x5a, 0x8c, 0xca, 0x93, 0xc3, 0xbc, 0xc7, 0x5a, 0xc3, 0xee, 0xf6, 0x1e, 0x74, 0xfa, 0x8c,
	0x9f, 0x30, 0xee, 0x1f, 0x33, 0x7f, 0xca, 0xe2, 0xd5, 0x4b, 0xfb, 0xa2, 0xd0, 0xd3, 0xee, 0xfe,
	0x43, 0x68, 0xc8, 0x66, 0x95, 0xce, 0x4a, 0xf2, 0x7e, 0x05, 0x44, 0x6e, 0x03, 0xdc, 0x48, 0x62,
	0xcb, 0xac, 0x4e, 0x59, 0xdc, 0x46, 0x37, 0x0b, 0xa6, 0x72, 0x55, 0x7c, 0x7f, 0x8b, 0x0d, 0xb1,
	0x5b, 0x1a, 0xc1, 0x3e, 0xe3, 0x2f, 0x80, 0xc8, 0x6c, 0xf8, 0x16, 0x9e, 0x7c, 0x0a, 0xeb, 0xa2,
	0x48, 0x88, 0x31, 0xd2, 0x33, 0xa1, 0xad, 0x4b, 0x88, 0x80, 0xa9, 0xd9, 0x05, 0xbd, 0x28, 0x58,
	0xb7, 0x7b, 0xb1, 0x0f, 0x0f, 0xc6, 0x73, 0x7f, 0x31, 0xbe, 0x8a, 0x22, 0x7e, 0xbb, 0x90, 0x78,
	0xdf, 0xb3, 0x99, 0xb0, 0x8f, 0xf6, 0x39, 0x10, 0x99, 0xbe, 0xb7, 0x1c, 0x6a, 0xb7, 0xa4, 0x6f,
	0x1f, 0xe7, 0x29, 0x6c, 0xf4, 0x19, 0x3f, 0x1a, 0xa7, 0x7b, 0xc0, 0x9e, 0x49, 0xbf, 0x34, 0x7a,
	0xd9, 0xb3, 0xe8, 0x31, 0x80, 0x3c, 0xbb, 0x70, 0x28, 0xe1, 0x49, 0x8d, 0x1a, 0x08, 0x1e, 0x76,
	0x78, 0xa5, 0x90, 0xcd, 0x32, 0x17, 0x32, 0xc0, 0x3b, 0x4f, 0x33, 0xa1, 0x17, 0xc4, 0xbd, 0x20,
	0x66, 0x13, 0xbe, 0x7a, 0xb6, 0x0f, 0xa1, 0x31, 0x1a, 0xe0, 0x4d, 0x4a, 0x8d, 0xa2, 0x24, 0x7d,
	0xec, 0x56, 0xb3, 0x63, 0xd7, 0x7b, 0x51, 0xb2, 0x6b, 0xf7, 0xfe, 0x3e, 0xd4, 0x4d, 0x93, 0x52,
	0xf0, 0x2e, 0x60, 0x5b, 0x6a, 0x1f, 0x05, 0x21, 0xbb, 0x4b, 0xb7, 0x5e, 0x96, 0x0d, 0xff, 0x37,
	0x7e, 0x9d, 0xa7, 0x6b, 0x7b, 0xc7, 0xd1, 0xda, 0x2d, 0xd9, 0xb5, 0xe7, 0xcc, 0x1f, 0x1c, 0xd8,
	0xa2, 0x6c, 0xee, 0xcf, 0xfe, 0x63, 0x50, 0x1e, 0x41, 0xeb, 0x34, 0x9c, 0xe6, 0x1c, 0xc8, 0x00,
	0x3c, 0xb6, 0x4f, 0xc3, 0xa9, 0xe1, 0x46, 0x2a, 0xa2, 0xde, 0x90, 0x7d, 0xa5, 0xf4, 0x6a, 0x52,
	0x4f, 0x03, 0xa8, 0x37, 0x64, 0x5f, 0x09, 0xbd, 0xba, 0xd4, 0x53, 0xa2, 0xf7, 0x41, 0xde, 0x31,
	0xbb, 0xfb, 0x17, 0xb0, 0x2d, 0xa7, 0x79, 0xd7, 0xcb, 0xfa, 0x51, 0xd9, 0xb0, 0xdd, 0x83, 0x9f,
	0xc3, 0x83, 0x3e, 0xe3, 0xc2, 0x10, 0xee, 0xa8, 0xbb, 0xf4, 0x21, 0xb4, 0x99, 0xb6, 0x27, 0xd7,
	0x27, 0xd0, 0xd2, 0xfd, 0x84, 0xe5, 0xf5, 0xe7, 0x9b, 0x58, 0x28, 0x35, 0x48, 0xb3, 0xf6, 0x2c,
	0x13, 0xab, 0x66, 0x26, 0xbe, 0x81, 0x4d, 0xbc, 0xe6, 0xdd, 0xe5, 0x04, 0xce, 0x4c, 0x93, 0x76,
	0xc7, 0x1f, 0x29, 0xc7, 0x75, 0xd1, 0x6b, 0xd2, 0x0c, 0x58, 0xe1, 0xe9, 0x4b, 0xd8, 0x3c, 0x0e,
	0x92, 0xdb, 0x7a, 0xea, 0xbd, 0x36, 0xd5, 0xed, 0x5e, 0x7d, 0x08, 0x6b, 0xd8, 0x3c, 0xe7, 0xe9,
	0xa9, 0xb3, 0x2e, 0x5e, 0x22, 0x02, 0x1a, 0xd2, 0xb4, 0xcd, 0xfb, 0x05, 0x3c, 0xc4, 0x52, 0x1a,
	0x84, 0xec, 0xf0, 0x6a, 0x39, 0xbf, 0x4e, 0xee, 0x32, 0x76, 0x4b, 0xab, 0x6d, 0xbb, 0xbb, 0x9f,
	0x01, 0x88, 0x4e, 0xb8, 0xba, 0xa9, 0xc7, 0xdb, 0xe8, 0xb1, 0x46, 0x2f, 0x02, 0x7e, 0x75, 0xd0,
	0xa7, 0x46, 0xb7, 0x15, 0xb1, 0xdd, 0x83, 0x4e, 0xfa, 0x2a, 0x11, 0x7d, 0x57, 0x9f, 0x23, 0x17,
	0x85, 0x9e, 0x76, 0xd7, 0x7e, 0x00, 0x2d, 0x3d, 0xa6, 0x4a, 0x4c, 0xab, 0x67, 0x59, 0x2f, 0xef,
	0x4f, 0x0e, 0x6c, 0x8c, 0x6f, 0xe6, 0x93, 0x6f, 0x1e, 0x1f, 0x1f, 0x55, 0x23, 0x1f, 0xd7, 0x41,
	0x26, 0x76, 0x4f, 0xc5, 0x34, 0x0f, 0xda, 0x42, 0x8b, 0x9b, 0x25, 0xf3, 0xa9, 0x96, 0x6d, 0x16,
	0x0d, 0x1a, 0xde, 0xa0, 0x01, 0xfd, 0x64, 0xab, 0x52, 0xf1, 0x8d, 0xf7, 0x51, 0xed, 0xa0, 0xbd,
	0x2a, 0xfc, 0xd5, 0x81, 0xcd, 0xfd, 0xe4, 0xff, 0x39, 0x09, 0x0f, 0x36, 0xb2, 0x9b, 0xcf, 0xa0,
	0xa7, 0x2a, 0x6b, 0x0e, 0xc3, 0xe2, 0x2a, 0x27, 0x92, 0x3e, 0xd9, 0x52, 0x11, 0x8f, 0xf8, 0xc3,
	0x68, 0x36, 0x0b, 0xb8, 0x98, 0x1b, 0x3e, 0xdd, 0x36, 0xa9, 0x81, 0x78, 0x4f, 0x4c, 0xf7, 0xed,
	0x53, 0x7c, 0x03, 0x6b, 0xf8, 0xaa, 0x54, 0x05, 0xe5, 0xe0, 0x72, 0x61, 0xbc, 0x36, 0x2f, 0xd5,
	0xe8, 0xc2, 0x1b, 0x3d, 0xab, 0x54, 0x34, 0xde, 0x97, 0xd5, 0x1c, 0x17, 0xf1, 0x67, 0xc7, 0x28,
	0x63, 0x92, 0x29, 0x99, 0x06, 0xef, 0x82, 0xb7, 0x81, 0x7a, 0x0c, 0x56, 0xa9, 0x81, 0x60, 0xfb,
	0xfe, 0x64, 0xc2, 0x92, 0x44, 0xb4, 0x57, 0x64, 0x7b, 0x86, 0x60, 0xd4, 0x8e, 0x83, 0xf9, 0xb5,
	0x18, 0x63, 0x93, 0x8a, 0x6f, 0xe2, 0x42, 0x13, 0xb7, 0x94, 0x7e, 0xa6, 0x57, 0xa9, 0x96, 0xc9,
	0x87, 0xd0, 0x90, 0x5b, 0xad, 0x5b, 0x17, 0x3b, 0xa8, 0x90, 0x13, 0xaa, 0xd1, 0x7b, 0x01, 0x0d,
	0xb9, 0xff, 0xf3, 0xb5, 0xcb, 0x59, 0x59, 0xbb, 0x2a, 0xf9, 0x2a, 0xab, 0xaa, 0xc7, 0xf0, 0x36,
	0xea, 0xd6, 0x4a, 0x31, 0x05, 0xc8, 0x56, 0xbd, 0x94, 0x17, 0x8e, 0x25, 0x2f, 0x30, 0x0a, 0x78,
	0x5f, 0xc3, 0x28, 0x54, 0x54, 0x14, 0x94, 0xbc, 0x72, 0x6d, 0x2e, 0x8d, 0x4d, 0x63, 0x26, 0x96,
	0x93, 0x4f, 0xac, 0x47, 0xaa, 0x9b, 0xb6, 0x5d, 0xa7, 0x19, 0x50, 0x72, 0xae, 0x5a, 0x76, 0xce,
	0x9b, 0xc2, 0x56, 0xa1, 0x38, 0xdc, 0x7a, 0xb8, 0xf7, 0x05, 0x0b, 0x21, 0x46, 0x31, 0x1e, 0x73,
	0x88, 0x79, 0x1d, 0x68, 0x1f, 0x86, 0xcb, 0x84, 0xb3, 0x58, 0xdd, 0x96, 0xbd, 0x7f, 0x38, 0x39,
	0xc8, 0x5e, 0xce, 0xba, 0xb0, 0x86, 0x6f, 0xb0, 0xe1, 0x72, 0xa6, 0x46, 0x4b, 0x45, 0x6c, 0x11,
	0x4f, 0xbf, 0xe5, 0x4c, 0x05, 0x2e, 0x15, 0x31, 0xa2, 0xe7, 0x51, 0x88, 0x0d, 0x8a, 0x4d, 0x91,
	0x12, 0x06, 0x43, 0x8d, 0x27, 0x6f, 0xd2, 0x92, 0x14, 0xca, 0x61, 0xe4, 0x63, 0xe8, 0x28, 0x39,
	0xbb, 0x71, 0x4b, 0x56, 0xaf, 0x84, 0x93, 0x36, 0x54, 0x06, 0xa7, 0x8a, 0xdd, 0xab, 0x0c, 0x4e,
	0x31, 0x57, 0x06, 0xa7, 0xa3, 0x71, 0xb7, 0x29, 0x9f, 0x12, 0xf8, 0xed, 0xdd, 0x83, 0x2d, 0xe1,
	0x70, 0x7a, 0x2b, 0x60, 0x5f, 0x7a, 0xbf, 0xcb, 0x43, 0x2b, 0x1f, 0x96, 0xd8, 0x49, 0x6f, 0x65,
	0x25, 0x61, 0x26, 0x0d, 0x12, 0xf5, 0xe4, 0xac, 0x8a, 0x14, 0xd6, 0x32, 0xce, 0x6f, 0x7f, 0xb1,
	0x08, 0x03, 0x36, 0x1d, 0xcc, 0xa7, 0xec, 0xeb, 0xb4, 0x42, 0x99, 0x18, 0xfa, 0x93, 0x3e, 0x98,
	0x53, 0x7f, 0x4e, 0xf3, 0xd0, 0xff, 0x4e, 0x16, 0x76, 0xa0, 0x2d, 0x09, 0x32, 0x71, 0xee, 0xe1,
	0x10, 0xaf, 0x73, 0x88, 0x7d, 0x04, 0x83, 0x71, 0xab, 0xac, 0x66, 0xdc, 0x3a, 0xd0, 0xc6, 0x41,
	0x4e, 0xa2, 0x79, 0xc0, 0x23, 0x7c, 0xbe, 0x7b, 0xc7, 0x39, 0xc4, 0x6e, 0x7b, 0x0f, 0x9a, 0xc3,
	0xfc, 0x65, 0x4d, 0x38, 0xaf, 0xa3, 0xa0, 0x5b, 0xbd, 0xbf, 0x57, 0xb2, 0xae, 0x82, 0x06, 0x5e,
	0x2c, 0xcf, 0x12, 0xff, 0x52, 0xd6, 0x0b, 0x87, 0x6a, 0x59, 0x6c, 0x91, 0xc5, 0xf2, 0x38, 0xf2,
	0xa7, 0xc2, 0xa2, 0x43, 0x53, 0x11, 0x5b, 0x30, 0x47, 0x4e, 0xd8, 0x4c, 0x6d, 0xb7, 0x54, 0x44,
	0x7b, 0xe2, 0x55, 0x87, 0x4d, 0x72, 0x71, 0xb4, 0x4c, 0x76, 0xa1, 0x7d, 0xc2, 0x66, 0x67, 0x09,
	0x9b, 0x8e, 0x58, 0x3c, 0x61, 0x73, 0x2e, 0xd2, 0xd3, 0xa1, 0x05, 0x14, 0x37, 0xe0, 0xc8, 0xe7,
	0x57, 0x42, 0x4f, 0x31, 0x97, 0x19, 0x80, 0x23, 0xa0, 0x20, 0xc8, 0xe8, 0x35, 0x39, 0x42, 0x2a,
	0x93, 0x3d, 0xd8, 0xc2, 0x6f, 0x73, 0x88, 0xa6, 0x18, 0xa2, 0x08, 0xe3, 0x52, 0xf4, 0x82, 0xe4,
	0x7a, 0x70, 0x9a, 0x74, 0x5b, 0xd9, 0x52, 0x48, 0x88, 0xa6, 0x4d, 0xe4, 0x09, 0x34, 0x86, 0x8c,
	0x63, 0x27, 0xc8, 0xb8, 0x46, 0x81, 0x50, 0xd5, 0xe0, 0xfd, 0xd3, 0xc1, 0xda, 0x8d, 0xdd, 0xd1,
	0x6f, 0xca, 0xfc, 0xe9, 0x61, 0xb4, 0x9c, 0x73, 0x55, 0x54, 0x32, 0x00, 0x8f, 0x96, 0x8b, 0x38,
	0xe0, 0x4c, 0x36, 0xab, 0x17, 0x70, 0x86, 0xa4, 0xda, 0x07, 0x37, 0x9c, 0x25, 0xe9, 0x0b, 0x58,
	0x03, 0x5a, 0x5b, 0x36, 0xd7, 0x0c, 0x6d, 0xd9, 0xbe, 0x0b, 0xed, 0x41, 0xb4, 0x48, 0x06, 0xf3,
	0x51, 0x1c, 0x5d, 0xc6, 0x2c, 0x49, 0xd4, 0xe9, 0x5c, 0x40, 0x71, 0xd3, 0x0d, 0x22, 0x71, 0xb8,
	0xc9, 0xc0, 0x2a, 0x49, 0xd8, 0x67, 0xc1, 0xe5, 0x15, 0x67, 0x53, 0xb5, 0xe1, 0xd1, 0xbe, 0x46,
	0xf4, 0x21, 0xd1, 0x34, 0x0e, 0x89, 0x7f, 0x39, 0x50, 0x17, 0x51, 0x40, 0xdf, 0x85, 0x1b, 0x63,
	0x96, 0xcd, 0x5c, 0x03, 0xba, 0x95, 0xb2, 0xc9, 0x6f, 0xd2, 0x57, 0x9e, 0x06, 0xc8, 0x0e, 0xac,
	0x8f, 0xfc, 0xc9, 0x35, 0xe3, 0x52, 0x5b, 0xf1, 0x40, 0x06, 0x64, 0xf4, 0x10, 0x16, 0x6a, 0xb9,
	0x1e, 0xc2, 0xc6, 0x7d, 0xa8, 0xbf, 0x8a, 0xe3, 0x60, 0xae, 0x26, 0x2d, 0x05, 0x9c, 0xeb, 0xab,
	0x38, 0x8e, 0x96, 0x3c, 0x9d, 0xab, 0x94, 0x10, 0xef, 0xc5, 0xd1, 0x22, 0x98, 0xab, 0x79, 0x2a,
	0x49, 0x94, 0xdb, 0x38, 0x5a, 0xa0, 0x42, 0x53, 0x66, 0xb5, 0x12, 0xf5, 0xec, 0x5b, 0xd9, 0xec,
	0x9f, 0xff, 0x6d, 0x0b, 0x9a, 0x69, 0x91, 0x23, 0x3f, 0x81, 0x4e, 0xf1, 0x17, 0x0f, 0x92, 0x2b,
	0x1e, 0xee, 0x7b, 0xb9, 0x52, 0x92, 0xfd, 0x2a, 0xe2, 0x7d, 0x87, 0xfc, 0x08, 0xd6, 0x8d, 0xdf,
	0x14, 0x08, 0x11, 0x3d, 0x73, 0x3f, 0x45, 0xb8, 0x45, 0x4c, 0x2a, 0xe2, 0x45, 0x38, 0x65, 0xa2,
	0x49, 0x47, 0x5c, 0x2d, 0x0c, 0xda, 0xdb, 0xcd, 0x23, 0x7a, 0x2c, 0x83, 0x1a, 0x96, 0x63, 0xe5,
	0x59, 0x67, 0xb7, 0x88, 0x95, 0x15, 0x69, 0x51, 0x91, 0x5a, 0x14, 0xa9, 0x52, 0x1c, 0xc0, 0xbd,
	0x12, 0x6d, 0x4b, 0xba, 0x6a, 0x3e, 0x25, 0x5a, 0xd8, 0xb5, 0xb7, 0xe8, 0xf9, 0x6a, 0xce, 0x56,
	0xce, 0xd7, 0xa4, 0x79, 0xdd, 0x3c, 0x22, 0x55, 0x3e, 0x81, 0x35, 0xc5, 0x96, 0x12, 0xc1, 0xf2,
	0x65, 0x64, 0xab, 0x6b, 0xca, 0xb2, 0xf3, 0x4b, 0x41, 0xe6, 0x66, 0x84, 0x28, 0xb9, 0x8f, 0x5d,
	0x8a, 0x6c, 0xaa, 0x5b, 0x46, 0xa5, 0xfa, 0x21, 0x6c, 0x15, 0xf8, 0x4a, 0xf2, 0x30, 0x5b, 0x02,
	0x93, 0xa8, 0x73, 0x6d, 0xb8, 0x36, 0x52, 0xa0, 0x1b, 0xa5, 0x91, 0x32, 0xc3, 0xe9, 0xda, 0x70,
	0x69, 0xe4, 0x67, 0x70, 0x4f, 0x11, 0x89, 0x19, 0x8f, 0x48, 0xde, 0xc7, 0xee, 0x56, 0x8a, 0xd2,
	0x5d, 0xd1, 0xa4, 0x3d, 0x2a, 0x50, 0x85, 0xd2, 0xa3, 0x32, 0xff, 0xe8, 0xda, 0x70, 0xbd, 0x74,
	0x9a, 0x21, 0x94, 0x4b, 0x67, 0xd2, 0x8a, 0x6e, 0x1e, 0x29, 0x84, 0x53, 0xd3, 0x4d, 0x66, 0x38,
	0x4d, 0x6e, 0xcb, 0xb5, 0xe1, 0xd2, 0xc8, 0x0f, 0x01, 0x32, 0xba, 0x80, 0xdc, 0x13, 0xf3, 0x34,
	0x19, 0x09, 0xb7, 0x00, 0x49, 0xad, 0x63, 0x20, 0x65, 0x96, 0x44, 0x06, 0xd0, 0x4a, 0xcc, 0xb8,
	0x2b, 0x9a, 0xb4, 0x0f, 0x19, 0x39, 0x20, 0x7d, 0xc8, 0x71, 0x0d, 0x6e, 0x01, 0x2a, 0x84, 0xbd,
	0x30, 0xfd, 0x32, 0xb5, 0xe7, 0xda, 0x70, 0x69, 0xe4, 0xc7, 0xb0, 0x61, 0x12, 0x5e, 0x44, 0xbc,
	0x93, 0x0b, 0xdc, 0x9c, 0x5b, 0x02, 0xa5, 0xee, 0x11, 0x74, 0x8a, 0x2c, 0x24, 0x79, 0x2f, 0x0b,
	0x74, 0x8e, 0x1d, 0x73, 0xad, 0x0d, 0xda, 0x4e, 0x91, 0xf6, 0x92, 0x76, 0x2c, 0x2c, 0x9b, 0x6b,
	0x6d, 0x90, 0x76, 0x4e, 0x61, 0xdb, 0xc2, 0x5e, 0x10, 0x37, 0x4d, 0x9d, 0x32, 0x65, 0xe2, 0xae,
	0x6a, 0xd3, 0xdb, 0x3d, 0xc7, 0x36, 0xc8, 0xed, 0x5e, 0xa4, 0x2a, 0xdc, 0x32, 0xaa, 0x53, 0x5a,
	0xbf, 0xd8, 0x65, 0x4a, 0x9b, 0x0c, 0x83, 0x9b, 0x47, 0x74, 0x26, 0x64, 0x4f, 0x60, 0x99, 0x09,
	0xb9, 0x17, 0xbd, 0x5b, 0x80, 0x74, 0xe9, 0x35, 0x1e, 0x11, 0xb2, 0xf4, 0xe6, 0x1f, 0x1a, 0x6e,
	0x11, 0x4b, 0x27, 0xb8, 0xde, 0x67, 0x5c, 0x1f, 0x2c, 0x0f, 0x54, 0x34, 0xf2, 0xbf, 0xa5, 0xbb,
	0x16, 0x58, 0x27, 0x8f, 0x79, 0x8b, 0x97, 0xc9, 0x53, 0xb8, 0xea, 0xbb, 0x25, 0x50, 0xfb, 0x6c,
	0x5c, 0x87, 0xa5, 0xcf, 0xf9, 0x1b, 0xb3, 0x5b, 0xc4, 0x74, 0x88, 0xb2, 0x1f, 0xd4, 0x64, 0x88,
	0x72, 0xbf, 0xc2, 0xb9, 0x05, 0x48, 0x0f, 0x67, 0xdc, 0x90, 0xe5, 0x70, 0xf9, 0x4b, 0xb4, 0x5b,
	0xc4, 0x84, 0xe2, 0xaf, 0x1b, 0xe2, 0xef, 0x16, 0x9f, 0xfd, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xd0,
	0x99, 0xd7, 0xa2, 0x80, 0x21, 0x00, 0x00,
}
