// Code generated by protoc-gen-go.
// source: metanode.proto
// DO NOT EDIT!

/*
Package mp is a generated protocol buffer package.

It is generated from these files:
	metanode.proto

It has these top-level messages:
	GetMetaLeaderReq
	GetMetaLeaderAck
	CreateNameSpaceReq
	VolumeValue
	VolumePeer
	CreateNameSpaceAck
	ExpandNameSpaceReq
	ExpandNameSpaceAck
	SnapShotNameSpaceReq
	SnapShotNameSpaceAck
	DeleteNameSpaceReq
	DeleteNameSpaceAck
	GetFSInfoReq
	GetFSInfoAck
	CreateDirDirectReq
	CreateDirDirectAck
	CreateFileDirectReq
	CreateFileDirectAck
	DeleteDirDirectReq
	DeleteDirDirectAck
	RenameDirectReq
	RenameDirectAck
	DeleteFileDirectReq
	DeleteFileDirectAck
	GetInodeInfoDirectReq
	GetInodeInfoDirectAck
	StatDirectReq
	StatDirectAck
	ListDirectReq
	ListDirectAck
	GetFileChunksDirectReq
	GetFileChunksDirectAck
	AllocateChunkReq
	AllocateChunkAck
	SyncChunkReq
	SyncChunkAck
	AsyncChunkReq
	AsyncChunkAck
	InodeInfo
	Dirent
	DirentN
	BlockGroup
	BlockGroupWithHost
	ChunkInfo
	ChunkInfoWithBG
	MetaNodeHealthCheckReq
	MetaNodeHealthCheckAck
*/
package mp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetMetaLeaderReq struct {
	VolID string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
}

func (m *GetMetaLeaderReq) Reset()                    { *m = GetMetaLeaderReq{} }
func (m *GetMetaLeaderReq) String() string            { return proto.CompactTextString(m) }
func (*GetMetaLeaderReq) ProtoMessage()               {}
func (*GetMetaLeaderReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetMetaLeaderReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

type GetMetaLeaderAck struct {
	Ret    int32  `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	Leader string `protobuf:"bytes,2,opt,name=Leader" json:"Leader,omitempty"`
}

func (m *GetMetaLeaderAck) Reset()                    { *m = GetMetaLeaderAck{} }
func (m *GetMetaLeaderAck) String() string            { return proto.CompactTextString(m) }
func (*GetMetaLeaderAck) ProtoMessage()               {}
func (*GetMetaLeaderAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetMetaLeaderAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *GetMetaLeaderAck) GetLeader() string {
	if m != nil {
		return m.Leader
	}
	return ""
}

type CreateNameSpaceReq struct {
	VolID  string       `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	Volume *VolumeValue `protobuf:"bytes,4,opt,name=Volume" json:"Volume,omitempty"`
}

func (m *CreateNameSpaceReq) Reset()                    { *m = CreateNameSpaceReq{} }
func (m *CreateNameSpaceReq) String() string            { return proto.CompactTextString(m) }
func (*CreateNameSpaceReq) ProtoMessage()               {}
func (*CreateNameSpaceReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateNameSpaceReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *CreateNameSpaceReq) GetVolume() *VolumeValue {
	if m != nil {
		return m.Volume
	}
	return nil
}

type VolumeValue struct {
	RaftGroupID uint64        `protobuf:"varint,1,opt,name=RaftGroupID" json:"RaftGroupID,omitempty"`
	VolumePeers []*VolumePeer `protobuf:"bytes,2,rep,name=VolumePeers" json:"VolumePeers,omitempty"`
	BlockGroups []*BlockGroup `protobuf:"bytes,3,rep,name=BlockGroups" json:"BlockGroups,omitempty"`
}

func (m *VolumeValue) Reset()                    { *m = VolumeValue{} }
func (m *VolumeValue) String() string            { return proto.CompactTextString(m) }
func (*VolumeValue) ProtoMessage()               {}
func (*VolumeValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *VolumeValue) GetRaftGroupID() uint64 {
	if m != nil {
		return m.RaftGroupID
	}
	return 0
}

func (m *VolumeValue) GetVolumePeers() []*VolumePeer {
	if m != nil {
		return m.VolumePeers
	}
	return nil
}

func (m *VolumeValue) GetBlockGroups() []*BlockGroup {
	if m != nil {
		return m.BlockGroups
	}
	return nil
}

type VolumePeer struct {
	NodeID uint64 `protobuf:"varint,1,opt,name=NodeID" json:"NodeID,omitempty"`
	Host   string `protobuf:"bytes,2,opt,name=Host" json:"Host,omitempty"`
}

func (m *VolumePeer) Reset()                    { *m = VolumePeer{} }
func (m *VolumePeer) String() string            { return proto.CompactTextString(m) }
func (*VolumePeer) ProtoMessage()               {}
func (*VolumePeer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *VolumePeer) GetNodeID() uint64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *VolumePeer) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type CreateNameSpaceAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *CreateNameSpaceAck) Reset()                    { *m = CreateNameSpaceAck{} }
func (m *CreateNameSpaceAck) String() string            { return proto.CompactTextString(m) }
func (*CreateNameSpaceAck) ProtoMessage()               {}
func (*CreateNameSpaceAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreateNameSpaceAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type ExpandNameSpaceReq struct {
	VolID       string        `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	BlockGroups []*BlockGroup `protobuf:"bytes,2,rep,name=BlockGroups" json:"BlockGroups,omitempty"`
}

func (m *ExpandNameSpaceReq) Reset()                    { *m = ExpandNameSpaceReq{} }
func (m *ExpandNameSpaceReq) String() string            { return proto.CompactTextString(m) }
func (*ExpandNameSpaceReq) ProtoMessage()               {}
func (*ExpandNameSpaceReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ExpandNameSpaceReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *ExpandNameSpaceReq) GetBlockGroups() []*BlockGroup {
	if m != nil {
		return m.BlockGroups
	}
	return nil
}

type ExpandNameSpaceAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *ExpandNameSpaceAck) Reset()                    { *m = ExpandNameSpaceAck{} }
func (m *ExpandNameSpaceAck) String() string            { return proto.CompactTextString(m) }
func (*ExpandNameSpaceAck) ProtoMessage()               {}
func (*ExpandNameSpaceAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ExpandNameSpaceAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type SnapShotNameSpaceReq struct {
	VolID string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	Type  int32  `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
}

func (m *SnapShotNameSpaceReq) Reset()                    { *m = SnapShotNameSpaceReq{} }
func (m *SnapShotNameSpaceReq) String() string            { return proto.CompactTextString(m) }
func (*SnapShotNameSpaceReq) ProtoMessage()               {}
func (*SnapShotNameSpaceReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SnapShotNameSpaceReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *SnapShotNameSpaceReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type SnapShotNameSpaceAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *SnapShotNameSpaceAck) Reset()                    { *m = SnapShotNameSpaceAck{} }
func (m *SnapShotNameSpaceAck) String() string            { return proto.CompactTextString(m) }
func (*SnapShotNameSpaceAck) ProtoMessage()               {}
func (*SnapShotNameSpaceAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SnapShotNameSpaceAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type DeleteNameSpaceReq struct {
	VolID string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	Type  int32  `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
}

func (m *DeleteNameSpaceReq) Reset()                    { *m = DeleteNameSpaceReq{} }
func (m *DeleteNameSpaceReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteNameSpaceReq) ProtoMessage()               {}
func (*DeleteNameSpaceReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeleteNameSpaceReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *DeleteNameSpaceReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type DeleteNameSpaceAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *DeleteNameSpaceAck) Reset()                    { *m = DeleteNameSpaceAck{} }
func (m *DeleteNameSpaceAck) String() string            { return proto.CompactTextString(m) }
func (*DeleteNameSpaceAck) ProtoMessage()               {}
func (*DeleteNameSpaceAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DeleteNameSpaceAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type GetFSInfoReq struct {
	VolID string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
}

func (m *GetFSInfoReq) Reset()                    { *m = GetFSInfoReq{} }
func (m *GetFSInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetFSInfoReq) ProtoMessage()               {}
func (*GetFSInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetFSInfoReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

type GetFSInfoAck struct {
	Ret        int32  `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	TotalSpace uint64 `protobuf:"varint,2,opt,name=TotalSpace" json:"TotalSpace,omitempty"`
	FreeSpace  uint64 `protobuf:"varint,3,opt,name=FreeSpace" json:"FreeSpace,omitempty"`
}

func (m *GetFSInfoAck) Reset()                    { *m = GetFSInfoAck{} }
func (m *GetFSInfoAck) String() string            { return proto.CompactTextString(m) }
func (*GetFSInfoAck) ProtoMessage()               {}
func (*GetFSInfoAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetFSInfoAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *GetFSInfoAck) GetTotalSpace() uint64 {
	if m != nil {
		return m.TotalSpace
	}
	return 0
}

func (m *GetFSInfoAck) GetFreeSpace() uint64 {
	if m != nil {
		return m.FreeSpace
	}
	return 0
}

type CreateDirDirectReq struct {
	VolID  string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	PInode uint64 `protobuf:"varint,2,opt,name=PInode" json:"PInode,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *CreateDirDirectReq) Reset()                    { *m = CreateDirDirectReq{} }
func (m *CreateDirDirectReq) String() string            { return proto.CompactTextString(m) }
func (*CreateDirDirectReq) ProtoMessage()               {}
func (*CreateDirDirectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CreateDirDirectReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *CreateDirDirectReq) GetPInode() uint64 {
	if m != nil {
		return m.PInode
	}
	return 0
}

func (m *CreateDirDirectReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateDirDirectAck struct {
	Ret   int32  `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	Inode uint64 `protobuf:"varint,2,opt,name=Inode" json:"Inode,omitempty"`
}

func (m *CreateDirDirectAck) Reset()                    { *m = CreateDirDirectAck{} }
func (m *CreateDirDirectAck) String() string            { return proto.CompactTextString(m) }
func (*CreateDirDirectAck) ProtoMessage()               {}
func (*CreateDirDirectAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CreateDirDirectAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *CreateDirDirectAck) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

type CreateFileDirectReq struct {
	VolID  string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	PInode uint64 `protobuf:"varint,2,opt,name=PInode" json:"PInode,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *CreateFileDirectReq) Reset()                    { *m = CreateFileDirectReq{} }
func (m *CreateFileDirectReq) String() string            { return proto.CompactTextString(m) }
func (*CreateFileDirectReq) ProtoMessage()               {}
func (*CreateFileDirectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CreateFileDirectReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *CreateFileDirectReq) GetPInode() uint64 {
	if m != nil {
		return m.PInode
	}
	return 0
}

func (m *CreateFileDirectReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateFileDirectAck struct {
	Ret   int32  `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	Inode uint64 `protobuf:"varint,2,opt,name=Inode" json:"Inode,omitempty"`
}

func (m *CreateFileDirectAck) Reset()                    { *m = CreateFileDirectAck{} }
func (m *CreateFileDirectAck) String() string            { return proto.CompactTextString(m) }
func (*CreateFileDirectAck) ProtoMessage()               {}
func (*CreateFileDirectAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CreateFileDirectAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *CreateFileDirectAck) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

type DeleteDirDirectReq struct {
	VolID  string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	PInode uint64 `protobuf:"varint,2,opt,name=PInode" json:"PInode,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *DeleteDirDirectReq) Reset()                    { *m = DeleteDirDirectReq{} }
func (m *DeleteDirDirectReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteDirDirectReq) ProtoMessage()               {}
func (*DeleteDirDirectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *DeleteDirDirectReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *DeleteDirDirectReq) GetPInode() uint64 {
	if m != nil {
		return m.PInode
	}
	return 0
}

func (m *DeleteDirDirectReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteDirDirectAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *DeleteDirDirectAck) Reset()                    { *m = DeleteDirDirectAck{} }
func (m *DeleteDirDirectAck) String() string            { return proto.CompactTextString(m) }
func (*DeleteDirDirectAck) ProtoMessage()               {}
func (*DeleteDirDirectAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *DeleteDirDirectAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type RenameDirectReq struct {
	VolID     string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	OldPInode uint64 `protobuf:"varint,2,opt,name=OldPInode" json:"OldPInode,omitempty"`
	OldName   string `protobuf:"bytes,3,opt,name=OldName" json:"OldName,omitempty"`
	NewPInode uint64 `protobuf:"varint,4,opt,name=NewPInode" json:"NewPInode,omitempty"`
	NewName   string `protobuf:"bytes,5,opt,name=NewName" json:"NewName,omitempty"`
}

func (m *RenameDirectReq) Reset()                    { *m = RenameDirectReq{} }
func (m *RenameDirectReq) String() string            { return proto.CompactTextString(m) }
func (*RenameDirectReq) ProtoMessage()               {}
func (*RenameDirectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *RenameDirectReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *RenameDirectReq) GetOldPInode() uint64 {
	if m != nil {
		return m.OldPInode
	}
	return 0
}

func (m *RenameDirectReq) GetOldName() string {
	if m != nil {
		return m.OldName
	}
	return ""
}

func (m *RenameDirectReq) GetNewPInode() uint64 {
	if m != nil {
		return m.NewPInode
	}
	return 0
}

func (m *RenameDirectReq) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

type RenameDirectAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *RenameDirectAck) Reset()                    { *m = RenameDirectAck{} }
func (m *RenameDirectAck) String() string            { return proto.CompactTextString(m) }
func (*RenameDirectAck) ProtoMessage()               {}
func (*RenameDirectAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *RenameDirectAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type DeleteFileDirectReq struct {
	VolID  string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	PInode uint64 `protobuf:"varint,2,opt,name=PInode" json:"PInode,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *DeleteFileDirectReq) Reset()                    { *m = DeleteFileDirectReq{} }
func (m *DeleteFileDirectReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteFileDirectReq) ProtoMessage()               {}
func (*DeleteFileDirectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *DeleteFileDirectReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *DeleteFileDirectReq) GetPInode() uint64 {
	if m != nil {
		return m.PInode
	}
	return 0
}

func (m *DeleteFileDirectReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteFileDirectAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *DeleteFileDirectAck) Reset()                    { *m = DeleteFileDirectAck{} }
func (m *DeleteFileDirectAck) String() string            { return proto.CompactTextString(m) }
func (*DeleteFileDirectAck) ProtoMessage()               {}
func (*DeleteFileDirectAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *DeleteFileDirectAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type GetInodeInfoDirectReq struct {
	VolID  string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	PInode uint64 `protobuf:"varint,2,opt,name=PInode" json:"PInode,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *GetInodeInfoDirectReq) Reset()                    { *m = GetInodeInfoDirectReq{} }
func (m *GetInodeInfoDirectReq) String() string            { return proto.CompactTextString(m) }
func (*GetInodeInfoDirectReq) ProtoMessage()               {}
func (*GetInodeInfoDirectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *GetInodeInfoDirectReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *GetInodeInfoDirectReq) GetPInode() uint64 {
	if m != nil {
		return m.PInode
	}
	return 0
}

func (m *GetInodeInfoDirectReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetInodeInfoDirectAck struct {
	Ret       int32      `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	InodeInfo *InodeInfo `protobuf:"bytes,2,opt,name=InodeInfo" json:"InodeInfo,omitempty"`
	Inode     uint64     `protobuf:"varint,3,opt,name=Inode" json:"Inode,omitempty"`
}

func (m *GetInodeInfoDirectAck) Reset()                    { *m = GetInodeInfoDirectAck{} }
func (m *GetInodeInfoDirectAck) String() string            { return proto.CompactTextString(m) }
func (*GetInodeInfoDirectAck) ProtoMessage()               {}
func (*GetInodeInfoDirectAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GetInodeInfoDirectAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *GetInodeInfoDirectAck) GetInodeInfo() *InodeInfo {
	if m != nil {
		return m.InodeInfo
	}
	return nil
}

func (m *GetInodeInfoDirectAck) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

type StatDirectReq struct {
	VolID  string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	PInode uint64 `protobuf:"varint,2,opt,name=PInode" json:"PInode,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *StatDirectReq) Reset()                    { *m = StatDirectReq{} }
func (m *StatDirectReq) String() string            { return proto.CompactTextString(m) }
func (*StatDirectReq) ProtoMessage()               {}
func (*StatDirectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *StatDirectReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *StatDirectReq) GetPInode() uint64 {
	if m != nil {
		return m.PInode
	}
	return 0
}

func (m *StatDirectReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type StatDirectAck struct {
	Ret       int32  `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	InodeType bool   `protobuf:"varint,2,opt,name=InodeType" json:"InodeType,omitempty"`
	Inode     uint64 `protobuf:"varint,3,opt,name=Inode" json:"Inode,omitempty"`
}

func (m *StatDirectAck) Reset()                    { *m = StatDirectAck{} }
func (m *StatDirectAck) String() string            { return proto.CompactTextString(m) }
func (*StatDirectAck) ProtoMessage()               {}
func (*StatDirectAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *StatDirectAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *StatDirectAck) GetInodeType() bool {
	if m != nil {
		return m.InodeType
	}
	return false
}

func (m *StatDirectAck) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

type ListDirectReq struct {
	VolID  string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	PInode uint64 `protobuf:"varint,2,opt,name=PInode" json:"PInode,omitempty"`
}

func (m *ListDirectReq) Reset()                    { *m = ListDirectReq{} }
func (m *ListDirectReq) String() string            { return proto.CompactTextString(m) }
func (*ListDirectReq) ProtoMessage()               {}
func (*ListDirectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ListDirectReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *ListDirectReq) GetPInode() uint64 {
	if m != nil {
		return m.PInode
	}
	return 0
}

type ListDirectAck struct {
	Ret     int32      `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	Dirents []*DirentN `protobuf:"bytes,2,rep,name=Dirents" json:"Dirents,omitempty"`
}

func (m *ListDirectAck) Reset()                    { *m = ListDirectAck{} }
func (m *ListDirectAck) String() string            { return proto.CompactTextString(m) }
func (*ListDirectAck) ProtoMessage()               {}
func (*ListDirectAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ListDirectAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *ListDirectAck) GetDirents() []*DirentN {
	if m != nil {
		return m.Dirents
	}
	return nil
}

type GetFileChunksDirectReq struct {
	VolID  string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	PInode uint64 `protobuf:"varint,2,opt,name=PInode" json:"PInode,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *GetFileChunksDirectReq) Reset()                    { *m = GetFileChunksDirectReq{} }
func (m *GetFileChunksDirectReq) String() string            { return proto.CompactTextString(m) }
func (*GetFileChunksDirectReq) ProtoMessage()               {}
func (*GetFileChunksDirectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *GetFileChunksDirectReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *GetFileChunksDirectReq) GetPInode() uint64 {
	if m != nil {
		return m.PInode
	}
	return 0
}

func (m *GetFileChunksDirectReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetFileChunksDirectAck struct {
	Ret        int32              `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	ChunkInfos []*ChunkInfoWithBG `protobuf:"bytes,2,rep,name=ChunkInfos" json:"ChunkInfos,omitempty"`
	Inode      uint64             `protobuf:"varint,3,opt,name=Inode" json:"Inode,omitempty"`
}

func (m *GetFileChunksDirectAck) Reset()                    { *m = GetFileChunksDirectAck{} }
func (m *GetFileChunksDirectAck) String() string            { return proto.CompactTextString(m) }
func (*GetFileChunksDirectAck) ProtoMessage()               {}
func (*GetFileChunksDirectAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *GetFileChunksDirectAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *GetFileChunksDirectAck) GetChunkInfos() []*ChunkInfoWithBG {
	if m != nil {
		return m.ChunkInfos
	}
	return nil
}

func (m *GetFileChunksDirectAck) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

type AllocateChunkReq struct {
	VolID string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
}

func (m *AllocateChunkReq) Reset()                    { *m = AllocateChunkReq{} }
func (m *AllocateChunkReq) String() string            { return proto.CompactTextString(m) }
func (*AllocateChunkReq) ProtoMessage()               {}
func (*AllocateChunkReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *AllocateChunkReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

type AllocateChunkAck struct {
	Ret       int32            `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	ChunkInfo *ChunkInfoWithBG `protobuf:"bytes,2,opt,name=ChunkInfo" json:"ChunkInfo,omitempty"`
}

func (m *AllocateChunkAck) Reset()                    { *m = AllocateChunkAck{} }
func (m *AllocateChunkAck) String() string            { return proto.CompactTextString(m) }
func (*AllocateChunkAck) ProtoMessage()               {}
func (*AllocateChunkAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *AllocateChunkAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *AllocateChunkAck) GetChunkInfo() *ChunkInfoWithBG {
	if m != nil {
		return m.ChunkInfo
	}
	return nil
}

type SyncChunkReq struct {
	VolID         string     `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	ParentInodeID uint64     `protobuf:"varint,2,opt,name=ParentInodeID" json:"ParentInodeID,omitempty"`
	Name          string     `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	ChunkInfo     *ChunkInfo `protobuf:"bytes,4,opt,name=ChunkInfo" json:"ChunkInfo,omitempty"`
	Size          int64      `protobuf:"varint,5,opt,name=Size" json:"Size,omitempty"`
}

func (m *SyncChunkReq) Reset()                    { *m = SyncChunkReq{} }
func (m *SyncChunkReq) String() string            { return proto.CompactTextString(m) }
func (*SyncChunkReq) ProtoMessage()               {}
func (*SyncChunkReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *SyncChunkReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *SyncChunkReq) GetParentInodeID() uint64 {
	if m != nil {
		return m.ParentInodeID
	}
	return 0
}

func (m *SyncChunkReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SyncChunkReq) GetChunkInfo() *ChunkInfo {
	if m != nil {
		return m.ChunkInfo
	}
	return nil
}

func (m *SyncChunkReq) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type SyncChunkAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *SyncChunkAck) Reset()                    { *m = SyncChunkAck{} }
func (m *SyncChunkAck) String() string            { return proto.CompactTextString(m) }
func (*SyncChunkAck) ProtoMessage()               {}
func (*SyncChunkAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *SyncChunkAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type AsyncChunkReq struct {
	VolID         string `protobuf:"bytes,1,opt,name=VolID" json:"VolID,omitempty"`
	ParentInodeID uint64 `protobuf:"varint,2,opt,name=ParentInodeID" json:"ParentInodeID,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	BlockGroupID  uint64 `protobuf:"varint,4,opt,name=BlockGroupID" json:"BlockGroupID,omitempty"`
	ChunkID       uint64 `protobuf:"varint,5,opt,name=ChunkID" json:"ChunkID,omitempty"`
	CommitSize    uint32 `protobuf:"varint,6,opt,name=CommitSize" json:"CommitSize,omitempty"`
}

func (m *AsyncChunkReq) Reset()                    { *m = AsyncChunkReq{} }
func (m *AsyncChunkReq) String() string            { return proto.CompactTextString(m) }
func (*AsyncChunkReq) ProtoMessage()               {}
func (*AsyncChunkReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *AsyncChunkReq) GetVolID() string {
	if m != nil {
		return m.VolID
	}
	return ""
}

func (m *AsyncChunkReq) GetParentInodeID() uint64 {
	if m != nil {
		return m.ParentInodeID
	}
	return 0
}

func (m *AsyncChunkReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AsyncChunkReq) GetBlockGroupID() uint64 {
	if m != nil {
		return m.BlockGroupID
	}
	return 0
}

func (m *AsyncChunkReq) GetChunkID() uint64 {
	if m != nil {
		return m.ChunkID
	}
	return 0
}

func (m *AsyncChunkReq) GetCommitSize() uint32 {
	if m != nil {
		return m.CommitSize
	}
	return 0
}

type AsyncChunkAck struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *AsyncChunkAck) Reset()                    { *m = AsyncChunkAck{} }
func (m *AsyncChunkAck) String() string            { return proto.CompactTextString(m) }
func (*AsyncChunkAck) ProtoMessage()               {}
func (*AsyncChunkAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *AsyncChunkAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type InodeInfo struct {
	ModifiTime int64        `protobuf:"varint,1,opt,name=ModifiTime" json:"ModifiTime,omitempty"`
	AccessTime int64        `protobuf:"varint,2,opt,name=AccessTime" json:"AccessTime,omitempty"`
	Link       uint32       `protobuf:"varint,3,opt,name=Link" json:"Link,omitempty"`
	FileSize   int64        `protobuf:"varint,4,opt,name=FileSize" json:"FileSize,omitempty"`
	Chunks     []*ChunkInfo `protobuf:"bytes,5,rep,name=Chunks" json:"Chunks,omitempty"`
}

func (m *InodeInfo) Reset()                    { *m = InodeInfo{} }
func (m *InodeInfo) String() string            { return proto.CompactTextString(m) }
func (*InodeInfo) ProtoMessage()               {}
func (*InodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *InodeInfo) GetModifiTime() int64 {
	if m != nil {
		return m.ModifiTime
	}
	return 0
}

func (m *InodeInfo) GetAccessTime() int64 {
	if m != nil {
		return m.AccessTime
	}
	return 0
}

func (m *InodeInfo) GetLink() uint32 {
	if m != nil {
		return m.Link
	}
	return 0
}

func (m *InodeInfo) GetFileSize() int64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *InodeInfo) GetChunks() []*ChunkInfo {
	if m != nil {
		return m.Chunks
	}
	return nil
}

type Dirent struct {
	InodeType bool   `protobuf:"varint,1,opt,name=InodeType" json:"InodeType,omitempty"`
	Inode     uint64 `protobuf:"varint,2,opt,name=Inode" json:"Inode,omitempty"`
}

func (m *Dirent) Reset()                    { *m = Dirent{} }
func (m *Dirent) String() string            { return proto.CompactTextString(m) }
func (*Dirent) ProtoMessage()               {}
func (*Dirent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *Dirent) GetInodeType() bool {
	if m != nil {
		return m.InodeType
	}
	return false
}

func (m *Dirent) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

type DirentN struct {
	InodeType bool   `protobuf:"varint,1,opt,name=InodeType" json:"InodeType,omitempty"`
	Inode     uint64 `protobuf:"varint,2,opt,name=Inode" json:"Inode,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *DirentN) Reset()                    { *m = DirentN{} }
func (m *DirentN) String() string            { return proto.CompactTextString(m) }
func (*DirentN) ProtoMessage()               {}
func (*DirentN) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *DirentN) GetInodeType() bool {
	if m != nil {
		return m.InodeType
	}
	return false
}

func (m *DirentN) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

func (m *DirentN) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type BlockGroup struct {
	BlockGroupID uint64 `protobuf:"varint,1,opt,name=BlockGroupID" json:"BlockGroupID,omitempty"`
	FreeSize     int64  `protobuf:"varint,2,opt,name=FreeSize" json:"FreeSize,omitempty"`
	Status       int32  `protobuf:"varint,3,opt,name=Status" json:"Status,omitempty"`
}

func (m *BlockGroup) Reset()                    { *m = BlockGroup{} }
func (m *BlockGroup) String() string            { return proto.CompactTextString(m) }
func (*BlockGroup) ProtoMessage()               {}
func (*BlockGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *BlockGroup) GetBlockGroupID() uint64 {
	if m != nil {
		return m.BlockGroupID
	}
	return 0
}

func (m *BlockGroup) GetFreeSize() int64 {
	if m != nil {
		return m.FreeSize
	}
	return 0
}

func (m *BlockGroup) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type BlockGroupWithHost struct {
	BlockGroupID uint64   `protobuf:"varint,1,opt,name=BlockGroupID" json:"BlockGroupID,omitempty"`
	Hosts        []string `protobuf:"bytes,2,rep,name=Hosts" json:"Hosts,omitempty"`
}

func (m *BlockGroupWithHost) Reset()                    { *m = BlockGroupWithHost{} }
func (m *BlockGroupWithHost) String() string            { return proto.CompactTextString(m) }
func (*BlockGroupWithHost) ProtoMessage()               {}
func (*BlockGroupWithHost) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *BlockGroupWithHost) GetBlockGroupID() uint64 {
	if m != nil {
		return m.BlockGroupID
	}
	return 0
}

func (m *BlockGroupWithHost) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

type ChunkInfo struct {
	ChunkID      uint64 `protobuf:"varint,1,opt,name=ChunkID" json:"ChunkID,omitempty"`
	ChunkSize    int32  `protobuf:"varint,2,opt,name=ChunkSize" json:"ChunkSize,omitempty"`
	BlockGroupID uint64 `protobuf:"varint,3,opt,name=BlockGroupID" json:"BlockGroupID,omitempty"`
}

func (m *ChunkInfo) Reset()                    { *m = ChunkInfo{} }
func (m *ChunkInfo) String() string            { return proto.CompactTextString(m) }
func (*ChunkInfo) ProtoMessage()               {}
func (*ChunkInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *ChunkInfo) GetChunkID() uint64 {
	if m != nil {
		return m.ChunkID
	}
	return 0
}

func (m *ChunkInfo) GetChunkSize() int32 {
	if m != nil {
		return m.ChunkSize
	}
	return 0
}

func (m *ChunkInfo) GetBlockGroupID() uint64 {
	if m != nil {
		return m.BlockGroupID
	}
	return 0
}

type ChunkInfoWithBG struct {
	ChunkID            uint64              `protobuf:"varint,1,opt,name=ChunkID" json:"ChunkID,omitempty"`
	ChunkSize          int32               `protobuf:"varint,2,opt,name=ChunkSize" json:"ChunkSize,omitempty"`
	BlockGroupWithHost *BlockGroupWithHost `protobuf:"bytes,3,opt,name=BlockGroupWithHost" json:"BlockGroupWithHost,omitempty"`
}

func (m *ChunkInfoWithBG) Reset()                    { *m = ChunkInfoWithBG{} }
func (m *ChunkInfoWithBG) String() string            { return proto.CompactTextString(m) }
func (*ChunkInfoWithBG) ProtoMessage()               {}
func (*ChunkInfoWithBG) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *ChunkInfoWithBG) GetChunkID() uint64 {
	if m != nil {
		return m.ChunkID
	}
	return 0
}

func (m *ChunkInfoWithBG) GetChunkSize() int32 {
	if m != nil {
		return m.ChunkSize
	}
	return 0
}

func (m *ChunkInfoWithBG) GetBlockGroupWithHost() *BlockGroupWithHost {
	if m != nil {
		return m.BlockGroupWithHost
	}
	return nil
}

type MetaNodeHealthCheckReq struct {
}

func (m *MetaNodeHealthCheckReq) Reset()                    { *m = MetaNodeHealthCheckReq{} }
func (m *MetaNodeHealthCheckReq) String() string            { return proto.CompactTextString(m) }
func (*MetaNodeHealthCheckReq) ProtoMessage()               {}
func (*MetaNodeHealthCheckReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

type MetaNodeHealthCheckAck struct {
	Ret    int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	Status int32 `protobuf:"varint,2,opt,name=Status" json:"Status,omitempty"`
}

func (m *MetaNodeHealthCheckAck) Reset()                    { *m = MetaNodeHealthCheckAck{} }
func (m *MetaNodeHealthCheckAck) String() string            { return proto.CompactTextString(m) }
func (*MetaNodeHealthCheckAck) ProtoMessage()               {}
func (*MetaNodeHealthCheckAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *MetaNodeHealthCheckAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *MetaNodeHealthCheckAck) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*GetMetaLeaderReq)(nil), "mp.GetMetaLeaderReq")
	proto.RegisterType((*GetMetaLeaderAck)(nil), "mp.GetMetaLeaderAck")
	proto.RegisterType((*CreateNameSpaceReq)(nil), "mp.CreateNameSpaceReq")
	proto.RegisterType((*VolumeValue)(nil), "mp.VolumeValue")
	proto.RegisterType((*VolumePeer)(nil), "mp.VolumePeer")
	proto.RegisterType((*CreateNameSpaceAck)(nil), "mp.CreateNameSpaceAck")
	proto.RegisterType((*ExpandNameSpaceReq)(nil), "mp.ExpandNameSpaceReq")
	proto.RegisterType((*ExpandNameSpaceAck)(nil), "mp.ExpandNameSpaceAck")
	proto.RegisterType((*SnapShotNameSpaceReq)(nil), "mp.SnapShotNameSpaceReq")
	proto.RegisterType((*SnapShotNameSpaceAck)(nil), "mp.SnapShotNameSpaceAck")
	proto.RegisterType((*DeleteNameSpaceReq)(nil), "mp.DeleteNameSpaceReq")
	proto.RegisterType((*DeleteNameSpaceAck)(nil), "mp.DeleteNameSpaceAck")
	proto.RegisterType((*GetFSInfoReq)(nil), "mp.GetFSInfoReq")
	proto.RegisterType((*GetFSInfoAck)(nil), "mp.GetFSInfoAck")
	proto.RegisterType((*CreateDirDirectReq)(nil), "mp.CreateDirDirectReq")
	proto.RegisterType((*CreateDirDirectAck)(nil), "mp.CreateDirDirectAck")
	proto.RegisterType((*CreateFileDirectReq)(nil), "mp.CreateFileDirectReq")
	proto.RegisterType((*CreateFileDirectAck)(nil), "mp.CreateFileDirectAck")
	proto.RegisterType((*DeleteDirDirectReq)(nil), "mp.DeleteDirDirectReq")
	proto.RegisterType((*DeleteDirDirectAck)(nil), "mp.DeleteDirDirectAck")
	proto.RegisterType((*RenameDirectReq)(nil), "mp.RenameDirectReq")
	proto.RegisterType((*RenameDirectAck)(nil), "mp.RenameDirectAck")
	proto.RegisterType((*DeleteFileDirectReq)(nil), "mp.DeleteFileDirectReq")
	proto.RegisterType((*DeleteFileDirectAck)(nil), "mp.DeleteFileDirectAck")
	proto.RegisterType((*GetInodeInfoDirectReq)(nil), "mp.GetInodeInfoDirectReq")
	proto.RegisterType((*GetInodeInfoDirectAck)(nil), "mp.GetInodeInfoDirectAck")
	proto.RegisterType((*StatDirectReq)(nil), "mp.StatDirectReq")
	proto.RegisterType((*StatDirectAck)(nil), "mp.StatDirectAck")
	proto.RegisterType((*ListDirectReq)(nil), "mp.ListDirectReq")
	proto.RegisterType((*ListDirectAck)(nil), "mp.ListDirectAck")
	proto.RegisterType((*GetFileChunksDirectReq)(nil), "mp.GetFileChunksDirectReq")
	proto.RegisterType((*GetFileChunksDirectAck)(nil), "mp.GetFileChunksDirectAck")
	proto.RegisterType((*AllocateChunkReq)(nil), "mp.AllocateChunkReq")
	proto.RegisterType((*AllocateChunkAck)(nil), "mp.AllocateChunkAck")
	proto.RegisterType((*SyncChunkReq)(nil), "mp.SyncChunkReq")
	proto.RegisterType((*SyncChunkAck)(nil), "mp.SyncChunkAck")
	proto.RegisterType((*AsyncChunkReq)(nil), "mp.AsyncChunkReq")
	proto.RegisterType((*AsyncChunkAck)(nil), "mp.AsyncChunkAck")
	proto.RegisterType((*InodeInfo)(nil), "mp.InodeInfo")
	proto.RegisterType((*Dirent)(nil), "mp.Dirent")
	proto.RegisterType((*DirentN)(nil), "mp.DirentN")
	proto.RegisterType((*BlockGroup)(nil), "mp.BlockGroup")
	proto.RegisterType((*BlockGroupWithHost)(nil), "mp.BlockGroupWithHost")
	proto.RegisterType((*ChunkInfo)(nil), "mp.ChunkInfo")
	proto.RegisterType((*ChunkInfoWithBG)(nil), "mp.ChunkInfoWithBG")
	proto.RegisterType((*MetaNodeHealthCheckReq)(nil), "mp.MetaNodeHealthCheckReq")
	proto.RegisterType((*MetaNodeHealthCheckAck)(nil), "mp.MetaNodeHealthCheckAck")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MetaNode service

type MetaNodeClient interface {
	// namespace opt
	GetMetaLeader(ctx context.Context, in *GetMetaLeaderReq, opts ...grpc.CallOption) (*GetMetaLeaderAck, error)
	CreateNameSpace(ctx context.Context, in *CreateNameSpaceReq, opts ...grpc.CallOption) (*CreateNameSpaceAck, error)
	ExpandNameSpace(ctx context.Context, in *ExpandNameSpaceReq, opts ...grpc.CallOption) (*ExpandNameSpaceAck, error)
	SnapShotNameSpace(ctx context.Context, in *SnapShotNameSpaceReq, opts ...grpc.CallOption) (*SnapShotNameSpaceAck, error)
	DeleteNameSpace(ctx context.Context, in *DeleteNameSpaceReq, opts ...grpc.CallOption) (*DeleteNameSpaceAck, error)
	GetFSInfo(ctx context.Context, in *GetFSInfoReq, opts ...grpc.CallOption) (*GetFSInfoAck, error)
	// fs meta opt
	CreateDirDirect(ctx context.Context, in *CreateDirDirectReq, opts ...grpc.CallOption) (*CreateDirDirectAck, error)
	StatDirect(ctx context.Context, in *StatDirectReq, opts ...grpc.CallOption) (*StatDirectAck, error)
	GetInodeInfoDirect(ctx context.Context, in *GetInodeInfoDirectReq, opts ...grpc.CallOption) (*GetInodeInfoDirectAck, error)
	ListDirect(ctx context.Context, in *ListDirectReq, opts ...grpc.CallOption) (*ListDirectAck, error)
	DeleteDirDirect(ctx context.Context, in *DeleteDirDirectReq, opts ...grpc.CallOption) (*DeleteDirDirectAck, error)
	RenameDirect(ctx context.Context, in *RenameDirectReq, opts ...grpc.CallOption) (*RenameDirectAck, error)
	CreateFileDirect(ctx context.Context, in *CreateFileDirectReq, opts ...grpc.CallOption) (*CreateFileDirectAck, error)
	DeleteFileDirect(ctx context.Context, in *DeleteFileDirectReq, opts ...grpc.CallOption) (*DeleteFileDirectAck, error)
	GetFileChunksDirect(ctx context.Context, in *GetFileChunksDirectReq, opts ...grpc.CallOption) (*GetFileChunksDirectAck, error)
	AllocateChunk(ctx context.Context, in *AllocateChunkReq, opts ...grpc.CallOption) (*AllocateChunkAck, error)
	SyncChunk(ctx context.Context, in *SyncChunkReq, opts ...grpc.CallOption) (*SyncChunkAck, error)
	AsyncChunk(ctx context.Context, in *AsyncChunkReq, opts ...grpc.CallOption) (*AsyncChunkAck, error)
	// utils:healthcheck etc
	MetaNodeHealthCheck(ctx context.Context, in *MetaNodeHealthCheckReq, opts ...grpc.CallOption) (*MetaNodeHealthCheckAck, error)
}

type metaNodeClient struct {
	cc *grpc.ClientConn
}

func NewMetaNodeClient(cc *grpc.ClientConn) MetaNodeClient {
	return &metaNodeClient{cc}
}

func (c *metaNodeClient) GetMetaLeader(ctx context.Context, in *GetMetaLeaderReq, opts ...grpc.CallOption) (*GetMetaLeaderAck, error) {
	out := new(GetMetaLeaderAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/GetMetaLeader", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) CreateNameSpace(ctx context.Context, in *CreateNameSpaceReq, opts ...grpc.CallOption) (*CreateNameSpaceAck, error) {
	out := new(CreateNameSpaceAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/CreateNameSpace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) ExpandNameSpace(ctx context.Context, in *ExpandNameSpaceReq, opts ...grpc.CallOption) (*ExpandNameSpaceAck, error) {
	out := new(ExpandNameSpaceAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/ExpandNameSpace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) SnapShotNameSpace(ctx context.Context, in *SnapShotNameSpaceReq, opts ...grpc.CallOption) (*SnapShotNameSpaceAck, error) {
	out := new(SnapShotNameSpaceAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/SnapShotNameSpace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) DeleteNameSpace(ctx context.Context, in *DeleteNameSpaceReq, opts ...grpc.CallOption) (*DeleteNameSpaceAck, error) {
	out := new(DeleteNameSpaceAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/DeleteNameSpace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) GetFSInfo(ctx context.Context, in *GetFSInfoReq, opts ...grpc.CallOption) (*GetFSInfoAck, error) {
	out := new(GetFSInfoAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/GetFSInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) CreateDirDirect(ctx context.Context, in *CreateDirDirectReq, opts ...grpc.CallOption) (*CreateDirDirectAck, error) {
	out := new(CreateDirDirectAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/CreateDirDirect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) StatDirect(ctx context.Context, in *StatDirectReq, opts ...grpc.CallOption) (*StatDirectAck, error) {
	out := new(StatDirectAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/StatDirect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) GetInodeInfoDirect(ctx context.Context, in *GetInodeInfoDirectReq, opts ...grpc.CallOption) (*GetInodeInfoDirectAck, error) {
	out := new(GetInodeInfoDirectAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/GetInodeInfoDirect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) ListDirect(ctx context.Context, in *ListDirectReq, opts ...grpc.CallOption) (*ListDirectAck, error) {
	out := new(ListDirectAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/ListDirect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) DeleteDirDirect(ctx context.Context, in *DeleteDirDirectReq, opts ...grpc.CallOption) (*DeleteDirDirectAck, error) {
	out := new(DeleteDirDirectAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/DeleteDirDirect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) RenameDirect(ctx context.Context, in *RenameDirectReq, opts ...grpc.CallOption) (*RenameDirectAck, error) {
	out := new(RenameDirectAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/RenameDirect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) CreateFileDirect(ctx context.Context, in *CreateFileDirectReq, opts ...grpc.CallOption) (*CreateFileDirectAck, error) {
	out := new(CreateFileDirectAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/CreateFileDirect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) DeleteFileDirect(ctx context.Context, in *DeleteFileDirectReq, opts ...grpc.CallOption) (*DeleteFileDirectAck, error) {
	out := new(DeleteFileDirectAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/DeleteFileDirect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) GetFileChunksDirect(ctx context.Context, in *GetFileChunksDirectReq, opts ...grpc.CallOption) (*GetFileChunksDirectAck, error) {
	out := new(GetFileChunksDirectAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/GetFileChunksDirect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) AllocateChunk(ctx context.Context, in *AllocateChunkReq, opts ...grpc.CallOption) (*AllocateChunkAck, error) {
	out := new(AllocateChunkAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/AllocateChunk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) SyncChunk(ctx context.Context, in *SyncChunkReq, opts ...grpc.CallOption) (*SyncChunkAck, error) {
	out := new(SyncChunkAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/SyncChunk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) AsyncChunk(ctx context.Context, in *AsyncChunkReq, opts ...grpc.CallOption) (*AsyncChunkAck, error) {
	out := new(AsyncChunkAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/AsyncChunk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaNodeClient) MetaNodeHealthCheck(ctx context.Context, in *MetaNodeHealthCheckReq, opts ...grpc.CallOption) (*MetaNodeHealthCheckAck, error) {
	out := new(MetaNodeHealthCheckAck)
	err := grpc.Invoke(ctx, "/mp.MetaNode/MetaNodeHealthCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MetaNode service

type MetaNodeServer interface {
	// namespace opt
	GetMetaLeader(context.Context, *GetMetaLeaderReq) (*GetMetaLeaderAck, error)
	CreateNameSpace(context.Context, *CreateNameSpaceReq) (*CreateNameSpaceAck, error)
	ExpandNameSpace(context.Context, *ExpandNameSpaceReq) (*ExpandNameSpaceAck, error)
	SnapShotNameSpace(context.Context, *SnapShotNameSpaceReq) (*SnapShotNameSpaceAck, error)
	DeleteNameSpace(context.Context, *DeleteNameSpaceReq) (*DeleteNameSpaceAck, error)
	GetFSInfo(context.Context, *GetFSInfoReq) (*GetFSInfoAck, error)
	// fs meta opt
	CreateDirDirect(context.Context, *CreateDirDirectReq) (*CreateDirDirectAck, error)
	StatDirect(context.Context, *StatDirectReq) (*StatDirectAck, error)
	GetInodeInfoDirect(context.Context, *GetInodeInfoDirectReq) (*GetInodeInfoDirectAck, error)
	ListDirect(context.Context, *ListDirectReq) (*ListDirectAck, error)
	DeleteDirDirect(context.Context, *DeleteDirDirectReq) (*DeleteDirDirectAck, error)
	RenameDirect(context.Context, *RenameDirectReq) (*RenameDirectAck, error)
	CreateFileDirect(context.Context, *CreateFileDirectReq) (*CreateFileDirectAck, error)
	DeleteFileDirect(context.Context, *DeleteFileDirectReq) (*DeleteFileDirectAck, error)
	GetFileChunksDirect(context.Context, *GetFileChunksDirectReq) (*GetFileChunksDirectAck, error)
	AllocateChunk(context.Context, *AllocateChunkReq) (*AllocateChunkAck, error)
	SyncChunk(context.Context, *SyncChunkReq) (*SyncChunkAck, error)
	AsyncChunk(context.Context, *AsyncChunkReq) (*AsyncChunkAck, error)
	// utils:healthcheck etc
	MetaNodeHealthCheck(context.Context, *MetaNodeHealthCheckReq) (*MetaNodeHealthCheckAck, error)
}

func RegisterMetaNodeServer(s *grpc.Server, srv MetaNodeServer) {
	s.RegisterService(&_MetaNode_serviceDesc, srv)
}

func _MetaNode_GetMetaLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetaLeaderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).GetMetaLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/GetMetaLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).GetMetaLeader(ctx, req.(*GetMetaLeaderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_CreateNameSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNameSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).CreateNameSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/CreateNameSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).CreateNameSpace(ctx, req.(*CreateNameSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_ExpandNameSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpandNameSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).ExpandNameSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/ExpandNameSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).ExpandNameSpace(ctx, req.(*ExpandNameSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_SnapShotNameSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapShotNameSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).SnapShotNameSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/SnapShotNameSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).SnapShotNameSpace(ctx, req.(*SnapShotNameSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_DeleteNameSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNameSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).DeleteNameSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/DeleteNameSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).DeleteNameSpace(ctx, req.(*DeleteNameSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_GetFSInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFSInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).GetFSInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/GetFSInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).GetFSInfo(ctx, req.(*GetFSInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_CreateDirDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDirDirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).CreateDirDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/CreateDirDirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).CreateDirDirect(ctx, req.(*CreateDirDirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_StatDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatDirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).StatDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/StatDirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).StatDirect(ctx, req.(*StatDirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_GetInodeInfoDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInodeInfoDirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).GetInodeInfoDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/GetInodeInfoDirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).GetInodeInfoDirect(ctx, req.(*GetInodeInfoDirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_ListDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).ListDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/ListDirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).ListDirect(ctx, req.(*ListDirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_DeleteDirDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDirDirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).DeleteDirDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/DeleteDirDirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).DeleteDirDirect(ctx, req.(*DeleteDirDirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_RenameDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameDirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).RenameDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/RenameDirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).RenameDirect(ctx, req.(*RenameDirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_CreateFileDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileDirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).CreateFileDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/CreateFileDirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).CreateFileDirect(ctx, req.(*CreateFileDirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_DeleteFileDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileDirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).DeleteFileDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/DeleteFileDirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).DeleteFileDirect(ctx, req.(*DeleteFileDirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_GetFileChunksDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileChunksDirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).GetFileChunksDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/GetFileChunksDirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).GetFileChunksDirect(ctx, req.(*GetFileChunksDirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_AllocateChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateChunkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).AllocateChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/AllocateChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).AllocateChunk(ctx, req.(*AllocateChunkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_SyncChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncChunkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).SyncChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/SyncChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).SyncChunk(ctx, req.(*SyncChunkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_AsyncChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AsyncChunkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).AsyncChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/AsyncChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).AsyncChunk(ctx, req.(*AsyncChunkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaNode_MetaNodeHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaNodeHealthCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaNodeServer).MetaNodeHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mp.MetaNode/MetaNodeHealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaNodeServer).MetaNodeHealthCheck(ctx, req.(*MetaNodeHealthCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetaNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mp.MetaNode",
	HandlerType: (*MetaNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetaLeader",
			Handler:    _MetaNode_GetMetaLeader_Handler,
		},
		{
			MethodName: "CreateNameSpace",
			Handler:    _MetaNode_CreateNameSpace_Handler,
		},
		{
			MethodName: "ExpandNameSpace",
			Handler:    _MetaNode_ExpandNameSpace_Handler,
		},
		{
			MethodName: "SnapShotNameSpace",
			Handler:    _MetaNode_SnapShotNameSpace_Handler,
		},
		{
			MethodName: "DeleteNameSpace",
			Handler:    _MetaNode_DeleteNameSpace_Handler,
		},
		{
			MethodName: "GetFSInfo",
			Handler:    _MetaNode_GetFSInfo_Handler,
		},
		{
			MethodName: "CreateDirDirect",
			Handler:    _MetaNode_CreateDirDirect_Handler,
		},
		{
			MethodName: "StatDirect",
			Handler:    _MetaNode_StatDirect_Handler,
		},
		{
			MethodName: "GetInodeInfoDirect",
			Handler:    _MetaNode_GetInodeInfoDirect_Handler,
		},
		{
			MethodName: "ListDirect",
			Handler:    _MetaNode_ListDirect_Handler,
		},
		{
			MethodName: "DeleteDirDirect",
			Handler:    _MetaNode_DeleteDirDirect_Handler,
		},
		{
			MethodName: "RenameDirect",
			Handler:    _MetaNode_RenameDirect_Handler,
		},
		{
			MethodName: "CreateFileDirect",
			Handler:    _MetaNode_CreateFileDirect_Handler,
		},
		{
			MethodName: "DeleteFileDirect",
			Handler:    _MetaNode_DeleteFileDirect_Handler,
		},
		{
			MethodName: "GetFileChunksDirect",
			Handler:    _MetaNode_GetFileChunksDirect_Handler,
		},
		{
			MethodName: "AllocateChunk",
			Handler:    _MetaNode_AllocateChunk_Handler,
		},
		{
			MethodName: "SyncChunk",
			Handler:    _MetaNode_SyncChunk_Handler,
		},
		{
			MethodName: "AsyncChunk",
			Handler:    _MetaNode_AsyncChunk_Handler,
		},
		{
			MethodName: "MetaNodeHealthCheck",
			Handler:    _MetaNode_MetaNodeHealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metanode.proto",
}

func init() { proto.RegisterFile("metanode.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x6d, 0x6f, 0x23, 0xb5,
	0x13, 0xff, 0x6f, 0x9e, 0xae, 0x99, 0x34, 0xd7, 0x9e, 0xdb, 0x7f, 0x09, 0xab, 0x0a, 0x05, 0x73,
	0xd7, 0x8b, 0x84, 0x54, 0x71, 0x3d, 0x5e, 0x20, 0xd4, 0x22, 0xda, 0x86, 0x3e, 0x48, 0xbd, 0xb4,
	0x38, 0xa5, 0x15, 0x08, 0x21, 0x2d, 0x89, 0x4b, 0x57, 0xdd, 0x64, 0x43, 0xb2, 0xd1, 0x71, 0x7c,
	0x0b, 0xc4, 0x0b, 0x5e, 0x22, 0xf1, 0x3d, 0xf8, 0x4e, 0x7c, 0x04, 0xe4, 0x87, 0xb5, 0xbd, 0x6b,
	0x2f, 0x57, 0xaa, 0xf0, 0x6e, 0xfd, 0x1b, 0xcf, 0xf8, 0x37, 0xe3, 0xf1, 0x64, 0x26, 0xf0, 0x78,
	0x44, 0x93, 0x60, 0x1c, 0x0f, 0xe9, 0xf6, 0x64, 0x1a, 0x27, 0x31, 0x2a, 0x8d, 0x26, 0xb8, 0x03,
	0xab, 0xc7, 0x34, 0x79, 0x45, 0x93, 0xe0, 0x8c, 0x06, 0x43, 0x3a, 0x25, 0xf4, 0x47, 0xb4, 0x0e,
	0xd5, 0xab, 0x38, 0x3a, 0xed, 0xb6, 0xbc, 0xb6, 0xd7, 0xa9, 0x13, 0xb1, 0xc0, 0xbb, 0xb9, 0x9d,
	0xfb, 0x83, 0x3b, 0xb4, 0x0a, 0x65, 0x42, 0x13, 0xbe, 0xaf, 0x4a, 0xd8, 0x27, 0xda, 0x80, 0x9a,
	0x10, 0xb7, 0x4a, 0x5c, 0x59, 0xae, 0x70, 0x1f, 0xd0, 0xe1, 0x94, 0x06, 0x09, 0xed, 0x05, 0x23,
	0xda, 0x9f, 0x04, 0x03, 0x5a, 0x78, 0x12, 0x7a, 0x0e, 0xb5, 0xab, 0x38, 0x9a, 0x8f, 0x68, 0xab,
	0xd2, 0xf6, 0x3a, 0x8d, 0x9d, 0x95, 0xed, 0xd1, 0x64, 0x5b, 0x20, 0x57, 0x41, 0x34, 0xa7, 0x44,
	0x8a, 0xf1, 0xaf, 0x1e, 0x34, 0x0c, 0x1c, 0xb5, 0xa1, 0x41, 0x82, 0x9b, 0xe4, 0x78, 0x1a, 0xcf,
	0x27, 0xd2, 0x68, 0x85, 0x98, 0x10, 0xfa, 0x28, 0x55, 0xb8, 0xa0, 0x74, 0x3a, 0x6b, 0x95, 0xda,
	0xe5, 0x4e, 0x63, 0xe7, 0xb1, 0xb6, 0xcf, 0x60, 0x62, 0x6e, 0x61, 0x1a, 0x07, 0x51, 0x3c, 0xb8,
	0xe3, 0x16, 0x66, 0xad, 0xb2, 0xd6, 0xd0, 0x30, 0x31, 0xb7, 0xe0, 0x4f, 0x00, 0xb4, 0x01, 0x16,
	0x90, 0x5e, 0x3c, 0xa4, 0x8a, 0x8e, 0x5c, 0x21, 0x04, 0x95, 0x93, 0x78, 0x96, 0xc8, 0x30, 0xf1,
	0x6f, 0xbc, 0x65, 0x05, 0xc9, 0x19, 0x64, 0xfc, 0x2d, 0xa0, 0x2f, 0x7e, 0x9a, 0x04, 0xe3, 0xe1,
	0x3d, 0x82, 0x99, 0xe3, 0x5f, 0x7a, 0x3b, 0xff, 0x2d, 0xcb, 0xba, 0x9b, 0xc5, 0xe7, 0xb0, 0xde,
	0x1f, 0x07, 0x93, 0xfe, 0x6d, 0x9c, 0xdc, 0x83, 0x07, 0x82, 0xca, 0xe5, 0x9b, 0x09, 0xe5, 0xfe,
	0x56, 0x09, 0xff, 0xc6, 0x1d, 0x87, 0x05, 0xf7, 0x59, 0x9f, 0x01, 0xea, 0xd2, 0x88, 0xde, 0x2b,
	0x7d, 0x5c, 0x27, 0x6d, 0x59, 0xfa, 0xee, 0x73, 0x9e, 0xc2, 0xf2, 0x31, 0x4d, 0x8e, 0xfa, 0xa7,
	0xe3, 0x9b, 0xb8, 0xf8, 0x29, 0x7c, 0x67, 0xec, 0x72, 0x3f, 0x83, 0xf7, 0x00, 0x2e, 0xe3, 0x24,
	0x88, 0xf8, 0x51, 0x9c, 0x49, 0x85, 0x18, 0x08, 0xda, 0x84, 0xfa, 0xd1, 0x94, 0x0a, 0x26, 0xad,
	0x32, 0x17, 0x6b, 0x00, 0x5f, 0xa5, 0x79, 0xd0, 0x0d, 0xa7, 0xdd, 0x70, 0x4a, 0x07, 0x49, 0xb1,
	0xb7, 0x1b, 0x50, 0xbb, 0x38, 0x65, 0x8f, 0x5a, 0x9e, 0x22, 0x57, 0x2c, 0x0a, 0xcc, 0x57, 0x6e,
	0xbc, 0x4e, 0xf8, 0x37, 0xde, 0xb5, 0xec, 0xba, 0xd9, 0xaf, 0x43, 0xd5, 0x34, 0x29, 0x16, 0xf8,
	0x1a, 0xd6, 0x84, 0xf6, 0x51, 0x18, 0xd1, 0x45, 0xd2, 0xda, 0xb3, 0x0d, 0xff, 0x1b, 0x5e, 0x57,
	0xe9, 0xdd, 0x2e, 0x38, 0x5a, 0x5b, 0x96, 0x5d, 0x77, 0xce, 0xfc, 0xe6, 0xc1, 0x0a, 0xa1, 0xe3,
	0x60, 0xf4, 0xd6, 0xa0, 0x6c, 0x42, 0xfd, 0x3c, 0x1a, 0x66, 0x08, 0x68, 0x00, 0xb5, 0xe0, 0xd1,
	0x79, 0x34, 0x34, 0x68, 0xa4, 0x4b, 0xa6, 0xd7, 0xa3, 0xaf, 0xa5, 0x5e, 0x45, 0xe8, 0x29, 0x80,
	0xe9, 0xf5, 0xe8, 0x6b, 0xae, 0x57, 0x15, 0x7a, 0x72, 0x89, 0x3f, 0xc8, 0x12, 0x73, 0xd3, 0xbf,
	0x86, 0x35, 0xe1, 0xe6, 0xa2, 0xaf, 0xf5, 0xb9, 0x6d, 0xd8, 0xcd, 0xe0, 0x6b, 0xf8, 0xff, 0x31,
	0x4d, 0xb8, 0x21, 0xf6, 0xa2, 0x16, 0xc9, 0x21, 0x72, 0x99, 0x76, 0x27, 0xd7, 0x87, 0x50, 0x57,
	0xfb, 0xb8, 0xe5, 0xc6, 0x4e, 0x93, 0x95, 0x49, 0x05, 0x12, 0x2d, 0xd7, 0x99, 0x58, 0x36, 0x33,
	0xf1, 0x4b, 0x68, 0xf6, 0x93, 0x20, 0x59, 0xa4, 0x03, 0x5f, 0x99, 0x26, 0xdd, 0xc4, 0x37, 0x25,
	0x71, 0x55, 0xf4, 0x96, 0x88, 0x06, 0x0a, 0x98, 0xee, 0x41, 0xf3, 0x2c, 0x9c, 0x3d, 0x94, 0x29,
	0x3e, 0x31, 0xd5, 0xdd, 0xac, 0x9e, 0xc1, 0x23, 0x26, 0x1e, 0x27, 0xe9, 0x6f, 0x4e, 0x83, 0x05,
	0x53, 0x40, 0x3d, 0x92, 0xca, 0xf0, 0x37, 0xb0, 0xc1, 0x4a, 0x69, 0x18, 0xd1, 0xc3, 0xdb, 0xf9,
	0xf8, 0x6e, 0xb6, 0xc8, 0xd8, 0xcd, 0x9d, 0xb6, 0xdd, 0x74, 0x5f, 0x02, 0xf0, 0x4d, 0xec, 0x76,
	0x53, 0xc6, 0x6b, 0x8c, 0xb1, 0x42, 0xaf, 0xc3, 0xe4, 0xf6, 0xe0, 0x98, 0x18, 0xdb, 0x0a, 0x62,
	0xdb, 0x81, 0xd5, 0xfd, 0x28, 0x8a, 0x07, 0x41, 0x22, 0xce, 0x2d, 0xfe, 0x1d, 0xb9, 0xce, 0xed,
	0x74, 0x53, 0x7b, 0x01, 0x75, 0x75, 0xa6, 0x4c, 0x4c, 0x27, 0x33, 0xbd, 0x0b, 0xff, 0xee, 0xc1,
	0x72, 0xff, 0xcd, 0x78, 0xf0, 0xcf, 0xe7, 0xa3, 0xa7, 0xd0, 0xbc, 0x08, 0xd8, 0x3d, 0x88, 0xc4,
	0xee, 0xca, 0x98, 0x66, 0x41, 0x57, 0x68, 0xd9, 0x63, 0xd1, 0x9c, 0x2a, 0xfa, 0xb1, 0x28, 0xd0,
	0x60, 0xc3, 0x0c, 0xf4, 0xc3, 0x9f, 0x45, 0x75, 0x2a, 0x13, 0xfe, 0x8d, 0xdb, 0x06, 0x41, 0x77,
	0x55, 0xf8, 0xd3, 0x83, 0xe6, 0xfe, 0xec, 0xbf, 0x74, 0x02, 0xc3, 0xb2, 0xee, 0x7b, 0x4e, 0xbb,
	0xb2, 0xb2, 0x66, 0x30, 0x56, 0x5c, 0x85, 0x23, 0x5d, 0x4e, 0xbf, 0x42, 0xd2, 0x25, 0xfb, 0x89,
	0x3f, 0x8c, 0x47, 0xa3, 0x30, 0xe1, 0xbe, 0xd5, 0xda, 0x5e, 0xa7, 0x49, 0x0c, 0x04, 0xbf, 0x6f,
	0xd2, 0x77, 0xbb, 0xf8, 0x87, 0x67, 0xd4, 0x1c, 0x66, 0xf0, 0x55, 0x3c, 0x0c, 0x6f, 0xc2, 0xcb,
	0x70, 0x44, 0xf9, 0xb6, 0x32, 0x31, 0x10, 0x26, 0xdf, 0x1f, 0x0c, 0xe8, 0x6c, 0xc6, 0xe5, 0x25,
	0x21, 0xd7, 0x08, 0x73, 0xf1, 0x2c, 0x1c, 0xdf, 0x71, 0x17, 0x9b, 0x84, 0x7f, 0x23, 0x1f, 0x96,
	0x58, 0xfe, 0x73, 0x8a, 0x15, 0xae, 0xa1, 0xd6, 0xe8, 0x19, 0xd4, 0xc4, 0xbb, 0x68, 0x55, 0x79,
	0xba, 0xe7, 0x2e, 0x50, 0x0a, 0xf1, 0x2e, 0xd4, 0xc4, 0x63, 0xcd, 0x16, 0x1a, 0xaf, 0xb0, 0xd0,
	0x94, 0xb2, 0x25, 0x51, 0x3e, 0xf5, 0xde, 0x43, 0xd4, 0x9d, 0xcf, 0x7a, 0x08, 0xa0, 0xaf, 0xc8,
	0xba, 0x44, 0xcf, 0x71, 0x89, 0x2c, 0x0a, 0xac, 0xb9, 0x62, 0x51, 0x28, 0xc9, 0x28, 0xc8, 0x35,
	0x2b, 0x28, 0xac, 0xc0, 0xce, 0x67, 0xfc, 0x8c, 0x2a, 0x91, 0x2b, 0xdc, 0x03, 0xa4, 0x6d, 0xb0,
	0x17, 0xc6, 0x3a, 0xf4, 0x7b, 0x9d, 0xb6, 0x0e, 0x55, 0xb6, 0x57, 0x54, 0x91, 0x3a, 0x11, 0x0b,
	0xfc, 0x83, 0xf1, 0x62, 0xcc, 0xac, 0xf2, 0xb2, 0x59, 0xb5, 0x29, 0xb7, 0x29, 0xae, 0x55, 0xa2,
	0x01, 0xeb, 0xf8, 0xb2, 0x7d, 0x3c, 0xfe, 0xc5, 0x83, 0x95, 0x5c, 0x69, 0x78, 0xf0, 0x79, 0x47,
	0xae, 0x20, 0xf0, 0x53, 0x1b, 0x3b, 0x1b, 0xd9, 0x19, 0x22, 0x95, 0x12, 0x87, 0x06, 0x6e, 0xc1,
	0x06, 0x1b, 0x1c, 0xd9, 0xe8, 0x73, 0x42, 0x83, 0x28, 0xb9, 0x3d, 0xbc, 0xa5, 0x03, 0xf6, 0xa6,
	0xf1, 0x81, 0x53, 0x52, 0x38, 0x5b, 0xca, 0xab, 0x2a, 0x99, 0x57, 0xb5, 0xf3, 0x57, 0x1d, 0x96,
	0x52, 0x23, 0x68, 0x0f, 0x9a, 0x99, 0x31, 0x15, 0xad, 0x33, 0x9e, 0xf9, 0x19, 0xd7, 0xb7, 0xd1,
	0xfd, 0xc1, 0x1d, 0xfe, 0x1f, 0x3a, 0x84, 0x95, 0xdc, 0x08, 0x86, 0xb8, 0xa3, 0xf6, 0xf0, 0xea,
	0xbb, 0x70, 0x65, 0x24, 0x37, 0x41, 0x09, 0x23, 0xf6, 0xd0, 0xe6, 0xbb, 0x70, 0x61, 0xe4, 0x14,
	0x9e, 0x58, 0xc3, 0x11, 0x6a, 0xb1, 0xed, 0xae, 0xa9, 0xcb, 0x77, 0x4b, 0x14, 0x9f, 0xdc, 0xf4,
	0x23, 0xf8, 0xd8, 0x23, 0x95, 0xef, 0xc2, 0x85, 0x91, 0x17, 0x50, 0x57, 0x43, 0x0f, 0x5a, 0x95,
	0xe1, 0x53, 0x93, 0x92, 0x9f, 0x45, 0x72, 0xc1, 0x54, 0x1d, 0xb4, 0x19, 0x4c, 0xb3, 0x5d, 0xf7,
	0x5d, 0xb8, 0x30, 0xf2, 0x31, 0x80, 0xee, 0x80, 0xd0, 0x13, 0xee, 0xa6, 0xd9, 0x64, 0xf9, 0x39,
	0x48, 0x68, 0x9d, 0x01, 0xb2, 0x1b, 0x3f, 0xf4, 0xae, 0x24, 0x69, 0xf7, 0x9a, 0x7e, 0x81, 0x48,
	0x71, 0xd0, 0xfd, 0x8e, 0xe0, 0x90, 0x69, 0x9f, 0xfc, 0x1c, 0x94, 0x0b, 0x7b, 0xce, 0x7d, 0x7b,
	0x5a, 0xf1, 0x5d, 0xb8, 0x30, 0xf2, 0x29, 0x2c, 0x9b, 0x3d, 0x3c, 0xe2, 0x3f, 0xfd, 0xb9, 0x71,
	0xc3, 0xb7, 0x40, 0xa1, 0x7b, 0x04, 0xab, 0xf9, 0xc1, 0x0a, 0xbd, 0xa3, 0x03, 0x9d, 0x69, 0xf8,
	0x7d, 0xa7, 0x40, 0xd9, 0xc9, 0x77, 0xf2, 0xc2, 0x8e, 0x63, 0x70, 0xf0, 0x9d, 0x02, 0x61, 0xe7,
	0x1c, 0xd6, 0x1c, 0x0d, 0x19, 0xf2, 0xd3, 0xd4, 0xb1, 0xbb, 0x40, 0xbf, 0x48, 0x26, 0x0c, 0xee,
	0x41, 0x33, 0xd3, 0x40, 0x89, 0xc7, 0x9e, 0xef, 0xbe, 0x7c, 0x1b, 0x55, 0x29, 0xad, 0x9a, 0x10,
	0x91, 0xd2, 0x66, 0xd3, 0xe4, 0x67, 0x11, 0x95, 0x09, 0xfa, 0x57, 0x5d, 0x64, 0x42, 0xa6, 0x49,
	0xf1, 0x73, 0x90, 0x72, 0xdc, 0x51, 0xe5, 0x84, 0xe3, 0xee, 0xc2, 0xe8, 0x17, 0xc9, 0xb8, 0xc1,
	0xef, 0x6b, 0xfc, 0x1f, 0xbc, 0x97, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x6c, 0xf8, 0x09, 0x46,
	0xd3, 0x13, 0x00, 0x00,
}
