syntax="proto3";

package mp;

service MetaNode {

    // namespace opt
    rpc GetMetaLeader(GetMetaLeaderReq) returns (GetMetaLeaderAck){};
    rpc CreateNameSpace(CreateNameSpaceReq) returns (CreateNameSpaceAck){};
    rpc ExpandNameSpace(ExpandNameSpaceReq) returns (ExpandNameSpaceAck){};
    rpc SnapShotNameSpace(SnapShotNameSpaceReq) returns (SnapShotNameSpaceAck){};
    rpc DeleteNameSpace(DeleteNameSpaceReq) returns (DeleteNameSpaceAck){};
    rpc GetFSInfo(GetFSInfoReq) returns (GetFSInfoAck){};

    // fs meta opt
    rpc CreateDirDirect(CreateDirDirectReq) returns (CreateDirDirectAck){};
    rpc StatDirect(StatDirectReq) returns (StatDirectAck){};
    rpc GetInodeInfoDirect(GetInodeInfoDirectReq) returns (GetInodeInfoDirectAck){};
    rpc ListDirect(ListDirectReq) returns (ListDirectAck){};
    rpc DeleteDirDirect(DeleteDirDirectReq) returns (DeleteDirDirectAck){};
    rpc RenameDirect(RenameDirectReq) returns (RenameDirectAck){};
    rpc CreateFileDirect(CreateFileDirectReq) returns (CreateFileDirectAck){};
    rpc DeleteFileDirect(DeleteFileDirectReq) returns (DeleteFileDirectAck){};
    rpc GetFileChunksDirect(GetFileChunksDirectReq) returns (GetFileChunksDirectAck){};
    rpc AllocateChunk(AllocateChunkReq) returns (AllocateChunkAck){};
    rpc SyncChunk(SyncChunkReq) returns (SyncChunkAck){};
    rpc AsyncChunk(AsyncChunkReq) returns (AsyncChunkAck){};

    //utils:healthcheck etc
    rpc MetaNodeHealthCheck(MetaNodeHealthCheckReq) returns (MetaNodeHealthCheckAck){};
    rpc GetBlockGroupInfo(GetBlockGroupInfoReq) returns (GetBlockGroupInfoAck){};
}


message GetMetaLeaderReq{
    string VolID = 1;
}
message GetMetaLeaderAck{
    int32 Ret = 1;
    string Leader = 2;
}

message CreateNameSpaceReq{
    string VolID = 1;
    VolumeValue Volume = 4;
}

message VolumeValue{
    uint64 RaftGroupID = 1;
    repeated VolumePeer VolumePeers = 2;
    repeated BlockGroup BlockGroups = 3;
}

message VolumePeer{
    uint64 NodeID = 1;
    string Host = 2;
}


message CreateNameSpaceAck{
    int32 Ret = 1;
}

message ExpandNameSpaceReq{
    string VolID = 1;
    repeated BlockGroup BlockGroups = 2;
}

message ExpandNameSpaceAck{
    int32 Ret = 1;
}

message SnapShotNameSpaceReq{
    string VolID = 1;
    int32  Type =2 ;
}
message SnapShotNameSpaceAck{
    int32 Ret = 1;
}
message DeleteNameSpaceReq{
    string VolID = 1;
    int32  Type = 2;
}
message DeleteNameSpaceAck{
    int32 Ret = 1;
}
message GetFSInfoReq {
    string VolID = 1;
}
message GetFSInfoAck {
    int32 Ret = 1;
    uint64 TotalSpace = 2;
    uint64 FreeSpace = 3;
}


message CreateDirDirectReq{
    string VolID = 1;
    uint64 PInode = 2;
    string Name = 3;
}
message CreateDirDirectAck{
    int32 Ret = 1;
    uint64 Inode = 2;
}

message CreateFileDirectReq{
    string VolID = 1;
    uint64 PInode = 2;
    string Name = 3;
}
message CreateFileDirectAck{
    int32 Ret = 1;
    uint64 Inode = 2;
}

message DeleteDirDirectReq{
    string VolID = 1;
    uint64 PInode = 2;
    string Name = 3;
}
message DeleteDirDirectAck{
    int32 Ret = 1;
}

message RenameDirectReq {
    string VolID = 1;
    uint64 OldPInode = 2;
    string OldName = 3; 
    uint64 NewPInode = 4;
    string NewName = 5;
}

message RenameDirectAck {
    int32 Ret = 1;
}

message DeleteFileDirectReq{
    string VolID = 1;
    uint64 PInode = 2;
    string Name = 3;
}
message DeleteFileDirectAck{
    int32 Ret = 1;
}


message GetInodeInfoDirectReq{
    string VolID = 1;
    uint64 PInode = 2;
    string Name = 3;
}
message GetInodeInfoDirectAck{
    int32 Ret = 1;
    InodeInfo InodeInfo = 2;
    uint64 Inode = 3;
}


message StatDirectReq{
    string VolID = 1;
    uint64 PInode = 2;
    string Name = 3;
}
message StatDirectAck{
    int32 Ret = 1;
    bool InodeType = 2;
    uint64 Inode = 3;
}


message ListDirectReq{
    string VolID = 1;
    uint64 PInode = 2;
}
message ListDirectAck{
    int32 Ret = 1;
    repeated DirentN Dirents = 2;
}

message GetFileChunksDirectReq {
    string VolID = 1;
    uint64 PInode = 2;
    string Name = 3;
}
message GetFileChunksDirectAck {
    int32 Ret = 1;
    repeated ChunkInfoWithBG ChunkInfos = 2; 
    uint64 Inode = 3;
}

message AllocateChunkReq {
    string VolID = 1;
}
message AllocateChunkAck {
    int32 Ret = 1;
    ChunkInfoWithBG ChunkInfo = 2; 
}

message SyncChunkReq {
    string VolID = 1;
    uint64 ParentInodeID = 2;
    string Name = 3;
    ChunkInfo ChunkInfo = 4;
    int64 Size = 5;
}
message SyncChunkAck {
    int32 Ret = 1;
}

message AsyncChunkReq {
    string VolID = 1;
    uint64 ParentInodeID = 2;
    string Name = 3;
    uint64 BlockGroupID = 4;
    uint64 ChunkID = 5;
    uint32  CommitSize = 6;
}
message AsyncChunkAck {
    int32 Ret = 1;
}



message InodeInfo{
    int64 ModifiTime = 1;
    int64 AccessTime = 2;
    uint32 Link = 3;
    int64 FileSize = 4;
    repeated ChunkInfo Chunks = 5;
}

message Dirent{
    bool InodeType = 1;
    uint64 Inode = 2;
}

message DirentN{
    bool InodeType = 1;
    uint64 Inode = 2;
    string Name = 3;
}


message BlockGroup{
    uint64 BlockGroupID = 1;
    int64 FreeSize = 2;
    int32 Status = 3;
}

message BlockGroupWithHost{
    uint64 BlockGroupID = 1;
    repeated string Hosts = 2;
}


message ChunkInfo{
    uint64 ChunkID = 1;
    int32 ChunkSize = 2;
    uint64 BlockGroupID = 3;
}

message ChunkInfoWithBG{
    uint64 ChunkID = 1;
    int32 ChunkSize = 2;
    BlockGroupWithHost BlockGroupWithHost = 3;
}

message MetaNodeHealthCheckReq{
}

message MetaNodeHealthCheckAck{
    int32 Ret = 1;
    int32 Status = 2;
}

message GetBlockGroupInfoReq{
    string VolID = 1;
    uint64 BGID = 2;
}
message GetBlockGroupInfoAck{
    int32 Ret = 1;
    BlockGroup BlockGroup = 2;
}
