syntax="proto3";

package mp;

service MetaNode {

    // cluster info
    rpc DatanodeRegistry(Datanode) returns (DatanodeRegistryAck){};
    //rpc DatanodeHeartbeat(DatanodeHeartbeatReq) returns (DatanodeHeartbeatAck){};
    rpc GetAllDatanode(GetAllDatanodeReq) returns (GetAllDatanodeAck){};
    rpc	DelDatanode(DelDatanodeReq) returns (DelDatanodeAck){};
    rpc CreateVol(CreateVolReq) returns (CreateVolAck){};
    rpc ExpandVolTS(ExpandVolTSReq) returns (ExpandVolTSAck){};
    rpc ExpandVolRS(ExpandVolRSReq) returns (ExpandVolRSAck){};
    rpc DelVolRSForExpand(DelVolRSForExpandReq) returns (DelVolRSForExpandAck){};
    rpc DeleteVol(DeleteVolReq) returns (DeleteVolAck){};
    rpc GetVolInfo(GetVolInfoReq) returns (GetVolInfoAck){};
    //rpc UpdateBlkDB(Block) returns (UpdateBlkDBAck){};
    rpc Migrate(MigrateReq) returns (MigrateAck){};

    rpc GetMetaLeader(GetMetaLeaderReq) returns (GetMetaLeaderAck){};

    rpc CreateNameSpace(CreateNameSpaceReq) returns (CreateNameSpaceAck){};
    rpc ExpandNameSpace(ExpandNameSpaceReq) returns (ExpandNameSpaceAck){};
    rpc SnapShootNameSpace(SnapShootNameSpaceReq) returns (SnapShootNameSpaceAck){};
    rpc DeleteNameSpace(DeleteNameSpaceReq) returns (DeleteNameSpaceAck){};

    rpc GetFSInfo(GetFSInfoReq) returns (GetFSInfoAck){};

    rpc CreateDirDirect(CreateDirDirectReq) returns (CreateDirDirectAck){};
    rpc StatDirect(StatDirectReq) returns (StatDirectAck){};
    rpc GetInodeInfoDirect(GetInodeInfoDirectReq) returns (GetInodeInfoDirectAck){};

    rpc ListDirect(ListDirectReq) returns (ListDirectAck){};
    rpc DeleteDirDirect(DeleteDirDirectReq) returns (DeleteDirDirectAck){};
    rpc RenameDirect(RenameDirectReq) returns (RenameDirectAck){};
    rpc CreateFileDirect(CreateFileDirectReq) returns (CreateFileDirectAck){};
    rpc DeleteFileDirect(DeleteFileDirectReq) returns (DeleteFileDirectAck){};
    rpc GetFileChunksDirect(GetFileChunksDirectReq) returns (GetFileChunksDirectAck){};


    rpc AllocateChunk(AllocateChunkReq) returns (AllocateChunkAck){};
    rpc SyncChunk(SyncChunkReq) returns (SyncChunkAck){};

    //rpc UpdateBlockGroup(UpdateBlockGroupReq) returns (UpdateBlockGroupAck){};
    //rpc MigrateBlockGroup(MigrateBlockGroupReq) returns (MigrateBlockGroupAck){};

}

message NULL{
}

message Datanode {
    string Ip = 1;
    int32 Port = 2;
    string MountPoint = 3 ;
    int32 Capacity = 4; //GB
    int32 Used = 5;
    int32 Free = 6;
    int32 Status = 7;
}

message DatanodeRegistryAck {
    int32 Ret = 1;
}

message UpdateBlkDBAck {
    int32 Ret = 1;
}

message GetAllDatanodeReq {
}
message GetAllDatanodeAck {
    int32 Ret = 1;
    repeated Datanode Datanodes = 2;
}
message DelDatanodeReq {
    string Ip = 1;
    string Port = 2;
}
message DelDatanodeAck {
    int32 Ret = 1;
}

message Volume {
	string UUID = 1;
	string Name = 2;
	int32  TotalSize = 3;
	int32  AllocatedSize = 4;
	uint64 RGID = 5;
}

message Vols {
	repeated Volume Volumes=1;
}

message Block {
    uint64 BlkID = 1;
    string Ip = 2;
    int32 Port = 3;
    string Path = 4;
    int32 Status = 5;
    uint64 BGID = 6;
    string VolID = 7;
}

message BGP {
    repeated Block Blocks = 1;
}

message CreateVolReq {
    string VolName = 1 ;
    int32  SpaceQuota = 2 ;
}
message CreateVolAck {
    int32 Ret = 1;
    string UUID = 2;
    uint64 RaftGroupID = 3;
}

message ExpandVolTSReq {
    string VolID = 1 ;
    int32  ExpandQuota = 2 ;
}
message ExpandVolTSAck {
    int32 Ret = 1;
}

message ExpandVolRSReq {
    string VolID = 1 ;
}
message ExpandVolRSAck {
    int32 Ret = 1;
    repeated BGP BGPS = 2;
}

message DelVolRSForExpandReq {
    string UUID=1;
    repeated BGP BGPS = 2;
}
message DelVolRSForExpandAck {
    int32 Ret=1;
}
message DeleteVolReq {
    string UUID = 1 ;
}
message DeleteVolAck {
    int32 Ret = 1;
}

message GetVolInfoReq {
    string UUID = 1 ;
}

message GetVolInfoAck {
    int32 Ret = 1;
    Volume VolInfo=2;
    repeated BGP BGPS = 3;
}

message MigrateReq {
    string DataNodeIP = 1;
    int32  DataNodePort = 2;
}

message MigrateAck {
    int32 Ret = 1;
}

message GetMetaLeaderReq{
    string VolID = 1;
}
message GetMetaLeaderAck{
    int32 Ret = 1;
    string Leader = 2;
}

message CreateNameSpaceReq{
    string VolID = 1;
    int32  Type = 2;
    uint64 RaftGroupID = 3;
}

message CreateNameSpaceAck{
    int32 Ret = 1;
}

message ExpandNameSpaceReq{
    string VolID = 1;
    repeated BlockGroup BlockGroups = 2;
}

message ExpandNameSpaceAck{
    int32 Ret = 1;
}

message SnapShootNameSpaceReq{
    string VolID = 1;
    int32  Type =2 ;
}
message SnapShootNameSpaceAck{
    int32 Ret = 1;
}
message DeleteNameSpaceReq{
    string VolID = 1;
    int32  Type = 2;
}
message DeleteNameSpaceAck{
    int32 Ret = 1;
}
message GetFSInfoReq {
    string VolID = 1;
}
message GetFSInfoAck {
    int32 Ret = 1;
    uint64 TotalSpace = 2;
    uint64 FreeSpace = 3;
}


message CreateDirDirectReq{
    string VolID = 1;
    uint64 PInode = 2;
    string Name = 3;
}
message CreateDirDirectAck{
    int32 Ret = 1;
    uint64 Inode = 2;
}

message CreateFileDirectReq{
    string VolID = 1;
    uint64 PInode = 2;
    string Name = 3;
}
message CreateFileDirectAck{
    int32 Ret = 1;
    uint64 Inode = 2;
}

message DeleteDirDirectReq{
    string VolID = 1;
    uint64 PInode = 2;
    string Name = 3;
}
message DeleteDirDirectAck{
    int32 Ret = 1;
}

message RenameDirectReq {
    string VolID = 1;
    uint64 OldPInode = 2;
    string OldName = 3; 
    uint64 NewPInode = 4;
    string NewName = 5;
}

message RenameDirectAck {
    int32 Ret = 1;
}

message DeleteFileDirectReq{
    string VolID = 1;
    uint64 PInode = 2;
    string Name = 3;
}
message DeleteFileDirectAck{
    int32 Ret = 1;
}


message GetInodeInfoDirectReq{
    string VolID = 1;
    uint64 PInode = 2;
    string Name = 3;
}
message GetInodeInfoDirectAck{
    int32 Ret = 1;
    InodeInfo InodeInfo = 2;
    uint64 Inode = 3;
}


message StatDirectReq{
    string VolID = 1;
    uint64 PInode = 2;
    string Name = 3;
}
message StatDirectAck{
    int32 Ret = 1;
    bool InodeType = 2;
    uint64 Inode = 3;
}


message ListDirectReq{
    string VolID = 1;
    uint64 PInode = 2;
}
message ListDirectAck{
    int32 Ret = 1;
    repeated DirentN Dirents = 2;
}

message GetFileChunksDirectReq {
    string VolID = 1;
    uint64 PInode = 2;
    string Name = 3;
}
message GetFileChunksDirectAck {
    int32 Ret = 1;
    repeated ChunkInfoWithBG ChunkInfos = 2; 
    uint64 Inode = 3;
}

message AllocateChunkReq {
    string VolID = 1;
}
message AllocateChunkAck {
    int32 Ret = 1;
    ChunkInfoWithBG ChunkInfo = 2; 
}

message SyncChunkReq {
    string VolID = 1;
    uint64 ParentInodeID = 2;
    string Name = 3;
    ChunkInfo ChunkInfo = 4;
    int64 Size = 5;
}
message SyncChunkAck {
    int32 Ret = 1;
}


message BlkInfo {
    uint64 BgpID  = 1;
    uint64 BlockID = 2;
    int32 Status = 3;
}


message InodeInfo{
    int64 ModifiTime = 1;
    int64 AccessTime = 2;
    uint32 Link = 3;
    int64 FileSize = 4;
    repeated ChunkInfo Chunks = 5;
}

message Dirent{
    bool InodeType = 1;
    uint64 Inode = 2;
}

message DirentN{
    bool InodeType = 1;
    uint64 Inode = 2;
    string Name = 3;
}


message BlockGroup{
    uint64 BlockGroupID = 1;
    int64 FreeSize = 2;
    int32 Status = 3;
}

message ChunkInfo{
    uint64 ChunkID = 1;
    int32 ChunkSize = 2;
    uint64 BlockGroupID = 3;
}

message ChunkInfoWithBG{
    uint64 ChunkID = 1;
    int32 ChunkSize = 2;
    BGP BGP = 3;
}

