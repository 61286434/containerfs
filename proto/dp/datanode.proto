syntax="proto3";

package dp;

service DataNode {
    rpc WriteChunk(WriteChunkReq) returns (WriteChunkAck){};
    rpc SeekWriteChunk(SeekWriteChunkReq) returns (WriteChunkAck){};
    rpc StreamReadChunk(StreamReadChunkReq) returns (stream StreamReadChunkAck){};
    rpc DeleteChunk(DeleteChunkReq) returns (DeleteChunkAck){};
    rpc DataNodeHealthCheck(DataNodeHealthCheckReq) returns (DataNodeHealthCheckAck){};
    rpc RecvMigrateMsg(RecvMigrateReq) returns (RecvMigrateAck){};
    rpc SendMigrateData(stream FInfo) returns (SendAck){};

    rpc C2MRepl(stream StreamWriteReq) returns (stream StreamWriteAck) {}
    rpc M2SRepl(stream StreamWriteReq) returns (stream StreamWriteAck) {}
    rpc S2BRepl(stream StreamWriteReq) returns (stream StreamWriteAck) {}
}

message WriteChunkReq{
    uint64 ChunkID = 1;
    uint64 BlockGroupID = 2;
    bytes  Databuf = 3;
    uint64 CommitID = 4;
}

message SeekWriteChunkReq{
    uint64 ChunkID = 1;
    uint64 BlockGroupID = 2;
    bytes Databuf = 3;
    int64 ChunkOffset = 4;
}

message WriteChunkAck{
    int32 Ret = 1;
    uint64 CommitID = 2;
}



message CreateBlockGroupStreamReq{
    string SlaveHost = 1;
    uint64 BlockGroupID = 2;
}

message CreateBlockGroupStreamAck{
    int32 ret = 1;
}


message StreamWriteReq{
    uint64 ChunkID = 1;
    bytes  Databuf = 2;
    uint32 DataLen = 3;
    uint64 CommitID = 4;
    string Master = 5;
    string Slave = 6;
    string Backup = 7;
    uint64 BlockGroupID = 8; 
    uint64 StreamID = 9;
}

message StreamWriteAck{
    int32 Ret = 1;
    uint64 ChunkID = 2;
    uint64 CommitID = 3;
    uint32 DataLen = 4;
    uint64 BlockGroupID = 5; 
    uint64 StreamID = 6;
}


message StreamReadChunkReq{
    uint64 ChunkID = 1;
    uint64 BlockGroupID = 2;
    int64 Offset = 3;
    int64 Readsize = 4;
}

message StreamReadChunkAck{
    bytes Databuf = 1;
}


message DeleteChunkReq{
    uint64 ChunkID = 1;
    uint64 BlockGroupID = 2;
}
message DeleteChunkAck{
    int32 Ret = 1;
}

message DataNodeHealthCheckReq{
}

message DataNodeHealthCheckAck{
    int32 Ret = 1;
    int32 Used = 2;
    int32 Status = 3;   
}

message RecvMigrateReq{
    uint64 BlockGroupID = 1;
    string DstHost = 2;
}

message RecvMigrateAck{
    int32 Ret = 1;
}

message FInfo{
    uint64 BlockGroupID = 1;
    string FName = 2;
    bytes DataBuf = 3;
}

message SendAck {
    int32 Ret = 1;
}