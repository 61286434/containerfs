syntax="proto3";

package dp;

service DataNode {
    rpc WriteChunk(WriteChunkReq) returns (WriteChunkAck){};
    rpc StreamReadChunk(StreamReadChunkReq) returns (stream StreamReadChunkAck){};
    rpc DeleteChunk(DeleteChunkReq) returns (DeleteChunkAck){};
    rpc DatanodeHealthCheck(DatanodeHealthCheckReq) returns (DatanodeHealthCheckAck){};
    rpc RecvMigrateMsg(RecvMigrateReq) returns (RecvMigrateAck){};
    rpc SendMigrateData(stream FInfo) returns (SendAck){};
}

message WriteChunkReq{
    uint64 ChunkID = 1;
    uint64 BlockID = 2;
    bytes Databuf = 3;
}
message WriteChunkAck{
    int32 Ret = 1;
}

message StreamReadChunkReq{
    uint64 ChunkID = 1;
    uint64 BlockID = 2;
    int64 Offset = 3;
    int64 Readsize = 4;
}

message StreamReadChunkAck{
    bytes Databuf = 1;
}


message DeleteChunkReq{
    uint64 ChunkID = 1;
    uint64 BlockID = 2;
}
message DeleteChunkAck{
    int32 Ret = 1;
}

message DatanodeHealthCheckReq{
}

message DatanodeHealthCheckAck{
    int32 Ret = 1;
    int32 Used = 2;
    int32 Status = 3;   
}

message RecvMigrateReq{
    uint64 SrcBlkID = 1;
    string SrcMount = 2;
    uint64 DstBlkID = 3;
    string DstIP = 4;
    int32  DstPort = 5;
    string DstMount = 6;
}

message RecvMigrateAck{
    int32 Ret = 1;
}

message FInfo{
    uint64 DstBlkID = 1;
    string DstMount = 2;
    string FName = 3;
    bytes DataBuf = 4;
}

message SendAck {
    int32 Ret = 1;
}


//message BlockGroup{
//    uint32 BlockGroupID = 1;
//    int32 FreeCnt = 2;
//    int32 Status = 3;
//    repeated BlockInfo BlockInfos = 4;
//}


//message BlockInfo{
//   uint32 BlockID = 1;
 //   int32 DataNodeIP = 2;
 //   int32 DataNodePort = 3;
//}
